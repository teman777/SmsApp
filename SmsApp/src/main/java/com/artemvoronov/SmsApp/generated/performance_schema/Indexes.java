/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.performance_schema;


import com.artemvoronov.SmsApp.generated.performance_schema.tables.CondInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.DataLockWaits;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.DataLocks;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.ErrorLog;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.EventsWaitsSummaryByInstance;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.FileInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.FileSummaryByInstance;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.HostCache;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.MetadataLocks;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.MutexInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.PreparedStatementsInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.ReplicationApplierStatusByCoordinator;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.ReplicationApplierStatusByWorker;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.ReplicationAsynchronousConnectionFailover;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.ReplicationConnectionStatus;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.RwlockInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.SocketInstances;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.SocketSummaryByInstance;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.TableHandles;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.Threads;

import org.jooq.Index;
import org.jooq.OrderField;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling indexes of tables in performance_schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes {

    // -------------------------------------------------------------------------
    // INDEX definitions
    // -------------------------------------------------------------------------

    public static final Index DATA_LOCK_WAITS_BLOCKING_ENGINE_LOCK_ID = Internal.createIndex(DSL.name("BLOCKING_ENGINE_LOCK_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.BLOCKING_ENGINE_LOCK_ID, DataLockWaits.DATA_LOCK_WAITS.ENGINE }, false);
    public static final Index DATA_LOCK_WAITS_BLOCKING_ENGINE_TRANSACTION_ID = Internal.createIndex(DSL.name("BLOCKING_ENGINE_TRANSACTION_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.BLOCKING_ENGINE_TRANSACTION_ID, DataLockWaits.DATA_LOCK_WAITS.ENGINE }, false);
    public static final Index DATA_LOCK_WAITS_BLOCKING_THREAD_ID = Internal.createIndex(DSL.name("BLOCKING_THREAD_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.BLOCKING_THREAD_ID, DataLockWaits.DATA_LOCK_WAITS.BLOCKING_EVENT_ID }, false);
    public static final Index REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_CHANNEL_NAME = Internal.createIndex(DSL.name("CHANNEL_NAME"), ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER, new OrderField[] { ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.CHANNEL_NAME, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.MANAGED_NAME }, false);
    public static final Index DATA_LOCKS_ENGINE_TRANSACTION_ID = Internal.createIndex(DSL.name("ENGINE_TRANSACTION_ID"), DataLocks.DATA_LOCKS, new OrderField[] { DataLocks.DATA_LOCKS.ENGINE_TRANSACTION_ID, DataLocks.DATA_LOCKS.ENGINE }, false);
    public static final Index ERROR_LOG_ERROR_CODE = Internal.createIndex(DSL.name("ERROR_CODE"), ErrorLog.ERROR_LOG, new OrderField[] { ErrorLog.ERROR_LOG.ERROR_CODE }, false);
    public static final Index EVENTS_WAITS_SUMMARY_BY_INSTANCE_EVENT_NAME = Internal.createIndex(DSL.name("EVENT_NAME"), EventsWaitsSummaryByInstance.EVENTS_WAITS_SUMMARY_BY_INSTANCE, new OrderField[] { EventsWaitsSummaryByInstance.EVENTS_WAITS_SUMMARY_BY_INSTANCE.EVENT_NAME }, false);
    public static final Index FILE_INSTANCES_EVENT_NAME = Internal.createIndex(DSL.name("EVENT_NAME"), FileInstances.FILE_INSTANCES, new OrderField[] { FileInstances.FILE_INSTANCES.EVENT_NAME }, false);
    public static final Index FILE_SUMMARY_BY_INSTANCE_EVENT_NAME = Internal.createIndex(DSL.name("EVENT_NAME"), FileSummaryByInstance.FILE_SUMMARY_BY_INSTANCE, new OrderField[] { FileSummaryByInstance.FILE_SUMMARY_BY_INSTANCE.EVENT_NAME }, false);
    public static final Index SOCKET_SUMMARY_BY_INSTANCE_EVENT_NAME = Internal.createIndex(DSL.name("EVENT_NAME"), SocketSummaryByInstance.SOCKET_SUMMARY_BY_INSTANCE, new OrderField[] { SocketSummaryByInstance.SOCKET_SUMMARY_BY_INSTANCE.EVENT_NAME }, false);
    public static final Index FILE_SUMMARY_BY_INSTANCE_FILE_NAME = Internal.createIndex(DSL.name("FILE_NAME"), FileSummaryByInstance.FILE_SUMMARY_BY_INSTANCE, new OrderField[] { FileSummaryByInstance.FILE_SUMMARY_BY_INSTANCE.FILE_NAME }, false);
    public static final Index HOST_CACHE_HOST = Internal.createIndex(DSL.name("HOST"), HostCache.HOST_CACHE, new OrderField[] { HostCache.HOST_CACHE.HOST }, false);
    public static final Index SOCKET_INSTANCES_IP = Internal.createIndex(DSL.name("IP"), SocketInstances.SOCKET_INSTANCES, new OrderField[] { SocketInstances.SOCKET_INSTANCES.IP, SocketInstances.SOCKET_INSTANCES.PORT }, false);
    public static final Index MUTEX_INSTANCES_LOCKED_BY_THREAD_ID = Internal.createIndex(DSL.name("LOCKED_BY_THREAD_ID"), MutexInstances.MUTEX_INSTANCES, new OrderField[] { MutexInstances.MUTEX_INSTANCES.LOCKED_BY_THREAD_ID }, false);
    public static final Index COND_INSTANCES_NAME = Internal.createIndex(DSL.name("NAME"), CondInstances.COND_INSTANCES, new OrderField[] { CondInstances.COND_INSTANCES.NAME }, false);
    public static final Index MUTEX_INSTANCES_NAME = Internal.createIndex(DSL.name("NAME"), MutexInstances.MUTEX_INSTANCES, new OrderField[] { MutexInstances.MUTEX_INSTANCES.NAME }, false);
    public static final Index RWLOCK_INSTANCES_NAME = Internal.createIndex(DSL.name("NAME"), RwlockInstances.RWLOCK_INSTANCES, new OrderField[] { RwlockInstances.RWLOCK_INSTANCES.NAME }, false);
    public static final Index THREADS_NAME = Internal.createIndex(DSL.name("NAME"), Threads.THREADS, new OrderField[] { Threads.THREADS.NAME }, false);
    public static final Index DATA_LOCKS_OBJECT_SCHEMA = Internal.createIndex(DSL.name("OBJECT_SCHEMA"), DataLocks.DATA_LOCKS, new OrderField[] { DataLocks.DATA_LOCKS.OBJECT_SCHEMA, DataLocks.DATA_LOCKS.OBJECT_NAME, DataLocks.DATA_LOCKS.PARTITION_NAME, DataLocks.DATA_LOCKS.SUBPARTITION_NAME }, false);
    public static final Index METADATA_LOCKS_OBJECT_TYPE = Internal.createIndex(DSL.name("OBJECT_TYPE"), MetadataLocks.METADATA_LOCKS, new OrderField[] { MetadataLocks.METADATA_LOCKS.OBJECT_TYPE, MetadataLocks.METADATA_LOCKS.OBJECT_SCHEMA, MetadataLocks.METADATA_LOCKS.OBJECT_NAME, MetadataLocks.METADATA_LOCKS.COLUMN_NAME }, false);
    public static final Index TABLE_HANDLES_OBJECT_TYPE = Internal.createIndex(DSL.name("OBJECT_TYPE"), TableHandles.TABLE_HANDLES, new OrderField[] { TableHandles.TABLE_HANDLES.OBJECT_TYPE, TableHandles.TABLE_HANDLES.OBJECT_SCHEMA, TableHandles.TABLE_HANDLES.OBJECT_NAME }, false);
    public static final Index PREPARED_STATEMENTS_INSTANCES_OWNER_OBJECT_TYPE = Internal.createIndex(DSL.name("OWNER_OBJECT_TYPE"), PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES, new OrderField[] { PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES.OWNER_OBJECT_TYPE, PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES.OWNER_OBJECT_SCHEMA, PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES.OWNER_OBJECT_NAME }, false);
    public static final Index METADATA_LOCKS_OWNER_THREAD_ID = Internal.createIndex(DSL.name("OWNER_THREAD_ID"), MetadataLocks.METADATA_LOCKS, new OrderField[] { MetadataLocks.METADATA_LOCKS.OWNER_THREAD_ID, MetadataLocks.METADATA_LOCKS.OWNER_EVENT_ID }, false);
    public static final Index TABLE_HANDLES_OWNER_THREAD_ID = Internal.createIndex(DSL.name("OWNER_THREAD_ID"), TableHandles.TABLE_HANDLES, new OrderField[] { TableHandles.TABLE_HANDLES.OWNER_THREAD_ID, TableHandles.TABLE_HANDLES.OWNER_EVENT_ID }, false);
    public static final Index ERROR_LOG_PRIO = Internal.createIndex(DSL.name("PRIO"), ErrorLog.ERROR_LOG, new OrderField[] { ErrorLog.ERROR_LOG.PRIO }, false);
    public static final Index THREADS_PROCESSLIST_ACCOUNT = Internal.createIndex(DSL.name("PROCESSLIST_ACCOUNT"), Threads.THREADS, new OrderField[] { Threads.THREADS.PROCESSLIST_USER, Threads.THREADS.PROCESSLIST_HOST }, false);
    public static final Index THREADS_PROCESSLIST_HOST = Internal.createIndex(DSL.name("PROCESSLIST_HOST"), Threads.THREADS, new OrderField[] { Threads.THREADS.PROCESSLIST_HOST }, false);
    public static final Index THREADS_PROCESSLIST_ID = Internal.createIndex(DSL.name("PROCESSLIST_ID"), Threads.THREADS, new OrderField[] { Threads.THREADS.PROCESSLIST_ID }, false);
    public static final Index DATA_LOCK_WAITS_REQUESTING_ENGINE_LOCK_ID = Internal.createIndex(DSL.name("REQUESTING_ENGINE_LOCK_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.REQUESTING_ENGINE_LOCK_ID, DataLockWaits.DATA_LOCK_WAITS.ENGINE }, false);
    public static final Index DATA_LOCK_WAITS_REQUESTING_ENGINE_TRANSACTION_ID = Internal.createIndex(DSL.name("REQUESTING_ENGINE_TRANSACTION_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.REQUESTING_ENGINE_TRANSACTION_ID, DataLockWaits.DATA_LOCK_WAITS.ENGINE }, false);
    public static final Index DATA_LOCK_WAITS_REQUESTING_THREAD_ID = Internal.createIndex(DSL.name("REQUESTING_THREAD_ID"), DataLockWaits.DATA_LOCK_WAITS, new OrderField[] { DataLockWaits.DATA_LOCK_WAITS.REQUESTING_THREAD_ID, DataLockWaits.DATA_LOCK_WAITS.REQUESTING_EVENT_ID }, false);
    public static final Index THREADS_RESOURCE_GROUP = Internal.createIndex(DSL.name("RESOURCE_GROUP"), Threads.THREADS, new OrderField[] { Threads.THREADS.RESOURCE_GROUP }, false);
    public static final Index SOCKET_INSTANCES_SOCKET_ID = Internal.createIndex(DSL.name("SOCKET_ID"), SocketInstances.SOCKET_INSTANCES, new OrderField[] { SocketInstances.SOCKET_INSTANCES.SOCKET_ID }, false);
    public static final Index PREPARED_STATEMENTS_INSTANCES_STATEMENT_ID = Internal.createIndex(DSL.name("STATEMENT_ID"), PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES, new OrderField[] { PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES.STATEMENT_ID }, false);
    public static final Index PREPARED_STATEMENTS_INSTANCES_STATEMENT_NAME = Internal.createIndex(DSL.name("STATEMENT_NAME"), PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES, new OrderField[] { PreparedStatementsInstances.PREPARED_STATEMENTS_INSTANCES.STATEMENT_NAME }, false);
    public static final Index ERROR_LOG_SUBSYSTEM = Internal.createIndex(DSL.name("SUBSYSTEM"), ErrorLog.ERROR_LOG, new OrderField[] { ErrorLog.ERROR_LOG.SUBSYSTEM }, false);
    public static final Index DATA_LOCKS_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), DataLocks.DATA_LOCKS, new OrderField[] { DataLocks.DATA_LOCKS.THREAD_ID, DataLocks.DATA_LOCKS.EVENT_ID }, false);
    public static final Index ERROR_LOG_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), ErrorLog.ERROR_LOG, new OrderField[] { ErrorLog.ERROR_LOG.THREAD_ID }, false);
    public static final Index REPLICATION_APPLIER_STATUS_BY_COORDINATOR_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), ReplicationApplierStatusByCoordinator.REPLICATION_APPLIER_STATUS_BY_COORDINATOR, new OrderField[] { ReplicationApplierStatusByCoordinator.REPLICATION_APPLIER_STATUS_BY_COORDINATOR.THREAD_ID }, false);
    public static final Index REPLICATION_APPLIER_STATUS_BY_WORKER_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), ReplicationApplierStatusByWorker.REPLICATION_APPLIER_STATUS_BY_WORKER, new OrderField[] { ReplicationApplierStatusByWorker.REPLICATION_APPLIER_STATUS_BY_WORKER.THREAD_ID }, false);
    public static final Index REPLICATION_CONNECTION_STATUS_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), ReplicationConnectionStatus.REPLICATION_CONNECTION_STATUS, new OrderField[] { ReplicationConnectionStatus.REPLICATION_CONNECTION_STATUS.THREAD_ID }, false);
    public static final Index SOCKET_INSTANCES_THREAD_ID = Internal.createIndex(DSL.name("THREAD_ID"), SocketInstances.SOCKET_INSTANCES, new OrderField[] { SocketInstances.SOCKET_INSTANCES.THREAD_ID }, false);
    public static final Index THREADS_THREAD_OS_ID = Internal.createIndex(DSL.name("THREAD_OS_ID"), Threads.THREADS, new OrderField[] { Threads.THREADS.THREAD_OS_ID }, false);
    public static final Index RWLOCK_INSTANCES_WRITE_LOCKED_BY_THREAD_ID = Internal.createIndex(DSL.name("WRITE_LOCKED_BY_THREAD_ID"), RwlockInstances.RWLOCK_INSTANCES, new OrderField[] { RwlockInstances.RWLOCK_INSTANCES.WRITE_LOCKED_BY_THREAD_ID }, false);
}
