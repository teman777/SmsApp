/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.X$innodbLockWaitsRecord;

import java.time.LocalDateTime;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$innodbLockWaits extends TableImpl<X$innodbLockWaitsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.x$innodb_lock_waits</code>
     */
    public static final X$innodbLockWaits X$INNODB_LOCK_WAITS = new X$innodbLockWaits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$innodbLockWaitsRecord> getRecordType() {
        return X$innodbLockWaitsRecord.class;
    }

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_started</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalDateTime> WAIT_STARTED = createField(DSL.name("wait_started"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_age</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalTime> WAIT_AGE = createField(DSL.name("wait_age"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.wait_age_secs</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, Long> WAIT_AGE_SECS = createField(DSL.name("wait_age_secs"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TABLE = createField(DSL.name("locked_table"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table_schema</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TABLE_SCHEMA = createField(DSL.name("locked_table_schema"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table_name</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TABLE_NAME = createField(DSL.name("locked_table_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table_partition</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TABLE_PARTITION = createField(DSL.name("locked_table_partition"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_table_subpartition</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TABLE_SUBPARTITION = createField(DSL.name("locked_table_subpartition"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_index</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_INDEX = createField(DSL.name("locked_index"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.locked_type</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> LOCKED_TYPE = createField(DSL.name("locked_type"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_id</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> WAITING_TRX_ID = createField(DSL.name("waiting_trx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_started</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalDateTime> WAITING_TRX_STARTED = createField(DSL.name("waiting_trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_age</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalTime> WAITING_TRX_AGE = createField(DSL.name("waiting_trx_age"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_rows_locked</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> WAITING_TRX_ROWS_LOCKED = createField(DSL.name("waiting_trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_trx_rows_modified</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> WAITING_TRX_ROWS_MODIFIED = createField(DSL.name("waiting_trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_pid</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> WAITING_PID = createField(DSL.name("waiting_pid"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_query</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> WAITING_QUERY = createField(DSL.name("waiting_query"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_lock_id</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> WAITING_LOCK_ID = createField(DSL.name("waiting_lock_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.waiting_lock_mode</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> WAITING_LOCK_MODE = createField(DSL.name("waiting_lock_mode"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_id</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> BLOCKING_TRX_ID = createField(DSL.name("blocking_trx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_pid</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> BLOCKING_PID = createField(DSL.name("blocking_pid"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_query</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> BLOCKING_QUERY = createField(DSL.name("blocking_query"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_lock_id</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> BLOCKING_LOCK_ID = createField(DSL.name("blocking_lock_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_lock_mode</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> BLOCKING_LOCK_MODE = createField(DSL.name("blocking_lock_mode"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_started</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalDateTime> BLOCKING_TRX_STARTED = createField(DSL.name("blocking_trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_age</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, LocalTime> BLOCKING_TRX_AGE = createField(DSL.name("blocking_trx_age"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_rows_locked</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> BLOCKING_TRX_ROWS_LOCKED = createField(DSL.name("blocking_trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.blocking_trx_rows_modified</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, ULong> BLOCKING_TRX_ROWS_MODIFIED = createField(DSL.name("blocking_trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.sql_kill_blocking_query</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> SQL_KILL_BLOCKING_QUERY = createField(DSL.name("sql_kill_blocking_query"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.x$innodb_lock_waits.sql_kill_blocking_connection</code>.
     */
    public final TableField<X$innodbLockWaitsRecord, String> SQL_KILL_BLOCKING_CONNECTION = createField(DSL.name("sql_kill_blocking_connection"), SQLDataType.VARCHAR(26).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private X$innodbLockWaits(Name alias, Table<X$innodbLockWaitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$innodbLockWaits(Name alias, Table<X$innodbLockWaitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$innodb_lock_waits` as select `r`.`trx_wait_started` AS `wait_started`,timediff(now(),`r`.`trx_wait_started`) AS `wait_age`,timestampdiff(SECOND,`r`.`trx_wait_started`,now()) AS `wait_age_secs`,concat(`sys`.`quote_identifier`(`rl`.`OBJECT_SCHEMA`),'.',`sys`.`quote_identifier`(`rl`.`OBJECT_NAME`)) AS `locked_table`,`rl`.`OBJECT_SCHEMA` AS `locked_table_schema`,`rl`.`OBJECT_NAME` AS `locked_table_name`,`rl`.`PARTITION_NAME` AS `locked_table_partition`,`rl`.`SUBPARTITION_NAME` AS `locked_table_subpartition`,`rl`.`INDEX_NAME` AS `locked_index`,`rl`.`LOCK_TYPE` AS `locked_type`,`r`.`trx_id` AS `waiting_trx_id`,`r`.`trx_started` AS `waiting_trx_started`,timediff(now(),`r`.`trx_started`) AS `waiting_trx_age`,`r`.`trx_rows_locked` AS `waiting_trx_rows_locked`,`r`.`trx_rows_modified` AS `waiting_trx_rows_modified`,`r`.`trx_mysql_thread_id` AS `waiting_pid`,`r`.`trx_query` AS `waiting_query`,`rl`.`ENGINE_LOCK_ID` AS `waiting_lock_id`,`rl`.`LOCK_MODE` AS `waiting_lock_mode`,`b`.`trx_id` AS `blocking_trx_id`,`b`.`trx_mysql_thread_id` AS `blocking_pid`,`b`.`trx_query` AS `blocking_query`,`bl`.`ENGINE_LOCK_ID` AS `blocking_lock_id`,`bl`.`LOCK_MODE` AS `blocking_lock_mode`,`b`.`trx_started` AS `blocking_trx_started`,timediff(now(),`b`.`trx_started`) AS `blocking_trx_age`,`b`.`trx_rows_locked` AS `blocking_trx_rows_locked`,`b`.`trx_rows_modified` AS `blocking_trx_rows_modified`,concat('KILL QUERY ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_query`,concat('KILL ',`b`.`trx_mysql_thread_id`) AS `sql_kill_blocking_connection` from ((((`performance_schema`.`data_lock_waits` `w` join `information_schema`.`INNODB_TRX` `b` on((`b`.`trx_id` = cast(`w`.`BLOCKING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `information_schema`.`INNODB_TRX` `r` on((`r`.`trx_id` = cast(`w`.`REQUESTING_ENGINE_TRANSACTION_ID` as char charset utf8mb4)))) join `performance_schema`.`data_locks` `bl` on((`bl`.`ENGINE_LOCK_ID` = `w`.`BLOCKING_ENGINE_LOCK_ID`))) join `performance_schema`.`data_locks` `rl` on((`rl`.`ENGINE_LOCK_ID` = `w`.`REQUESTING_ENGINE_LOCK_ID`))) order by `r`.`trx_wait_started`"));
    }

    /**
     * Create an aliased <code>sys.x$innodb_lock_waits</code> table reference
     */
    public X$innodbLockWaits(String alias) {
        this(DSL.name(alias), X$INNODB_LOCK_WAITS);
    }

    /**
     * Create an aliased <code>sys.x$innodb_lock_waits</code> table reference
     */
    public X$innodbLockWaits(Name alias) {
        this(alias, X$INNODB_LOCK_WAITS);
    }

    /**
     * Create a <code>sys.x$innodb_lock_waits</code> table reference
     */
    public X$innodbLockWaits() {
        this(DSL.name("x$innodb_lock_waits"), null);
    }

    public <O extends Record> X$innodbLockWaits(Table<O> child, ForeignKey<O, X$innodbLockWaitsRecord> key) {
        super(child, key, X$INNODB_LOCK_WAITS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$innodbLockWaits as(String alias) {
        return new X$innodbLockWaits(DSL.name(alias), this);
    }

    @Override
    public X$innodbLockWaits as(Name alias) {
        return new X$innodbLockWaits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$innodbLockWaits rename(String name) {
        return new X$innodbLockWaits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$innodbLockWaits rename(Name name) {
        return new X$innodbLockWaits(name, null);
    }
}
