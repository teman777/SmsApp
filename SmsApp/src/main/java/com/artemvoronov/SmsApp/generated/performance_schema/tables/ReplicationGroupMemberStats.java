/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.performance_schema.tables;


import com.artemvoronov.SmsApp.generated.performance_schema.PerformanceSchema;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.records.ReplicationGroupMemberStatsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationGroupMemberStats extends TableImpl<ReplicationGroupMemberStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.replication_group_member_stats</code>
     */
    public static final ReplicationGroupMemberStats REPLICATION_GROUP_MEMBER_STATS = new ReplicationGroupMemberStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationGroupMemberStatsRecord> getRecordType() {
        return ReplicationGroupMemberStatsRecord.class;
    }

    /**
     * The column <code>performance_schema.replication_group_member_stats.CHANNEL_NAME</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.VIEW_ID</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, String> VIEW_ID = createField(DSL.name("VIEW_ID"), SQLDataType.CHAR(60).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.MEMBER_ID</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, String> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_IN_QUEUE</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_IN_QUEUE = createField(DSL.name("COUNT_TRANSACTIONS_IN_QUEUE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_CHECKED</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_CHECKED = createField(DSL.name("COUNT_TRANSACTIONS_CHECKED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_CONFLICTS_DETECTED</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_CONFLICTS_DETECTED = createField(DSL.name("COUNT_CONFLICTS_DETECTED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_ROWS_VALIDATING</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_ROWS_VALIDATING = createField(DSL.name("COUNT_TRANSACTIONS_ROWS_VALIDATING"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.TRANSACTIONS_COMMITTED_ALL_MEMBERS</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, String> TRANSACTIONS_COMMITTED_ALL_MEMBERS = createField(DSL.name("TRANSACTIONS_COMMITTED_ALL_MEMBERS"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.LAST_CONFLICT_FREE_TRANSACTION</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, String> LAST_CONFLICT_FREE_TRANSACTION = createField(DSL.name("LAST_CONFLICT_FREE_TRANSACTION"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = createField(DSL.name("COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_REMOTE_APPLIED</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_REMOTE_APPLIED = createField(DSL.name("COUNT_TRANSACTIONS_REMOTE_APPLIED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_LOCAL_PROPOSED</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_LOCAL_PROPOSED = createField(DSL.name("COUNT_TRANSACTIONS_LOCAL_PROPOSED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_LOCAL_ROLLBACK</code>.
     */
    public final TableField<ReplicationGroupMemberStatsRecord, ULong> COUNT_TRANSACTIONS_LOCAL_ROLLBACK = createField(DSL.name("COUNT_TRANSACTIONS_LOCAL_ROLLBACK"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private ReplicationGroupMemberStats(Name alias, Table<ReplicationGroupMemberStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationGroupMemberStats(Name alias, Table<ReplicationGroupMemberStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.replication_group_member_stats</code> table reference
     */
    public ReplicationGroupMemberStats(String alias) {
        this(DSL.name(alias), REPLICATION_GROUP_MEMBER_STATS);
    }

    /**
     * Create an aliased <code>performance_schema.replication_group_member_stats</code> table reference
     */
    public ReplicationGroupMemberStats(Name alias) {
        this(alias, REPLICATION_GROUP_MEMBER_STATS);
    }

    /**
     * Create a <code>performance_schema.replication_group_member_stats</code> table reference
     */
    public ReplicationGroupMemberStats() {
        this(DSL.name("replication_group_member_stats"), null);
    }

    public <O extends Record> ReplicationGroupMemberStats(Table<O> child, ForeignKey<O, ReplicationGroupMemberStatsRecord> key) {
        super(child, key, REPLICATION_GROUP_MEMBER_STATS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public ReplicationGroupMemberStats as(String alias) {
        return new ReplicationGroupMemberStats(DSL.name(alias), this);
    }

    @Override
    public ReplicationGroupMemberStats as(Name alias) {
        return new ReplicationGroupMemberStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupMemberStats rename(String name) {
        return new ReplicationGroupMemberStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupMemberStats rename(Name name) {
        return new ReplicationGroupMemberStats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, ULong, ULong, ULong, ULong, String, String, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
