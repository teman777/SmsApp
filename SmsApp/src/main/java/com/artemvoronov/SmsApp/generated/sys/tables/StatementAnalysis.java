/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.StatementAnalysisRecord;

import java.math.BigInteger;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementAnalysis extends TableImpl<StatementAnalysisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.statement_analysis</code>
     */
    public static final StatementAnalysis STATEMENT_ANALYSIS = new StatementAnalysis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementAnalysisRecord> getRecordType() {
        return StatementAnalysisRecord.class;
    }

    /**
     * The column <code>sys.statement_analysis.query</code>.
     */
    public final TableField<StatementAnalysisRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statement_analysis.db</code>.
     */
    public final TableField<StatementAnalysisRecord, String> DB = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statement_analysis.full_scan</code>.
     */
    public final TableField<StatementAnalysisRecord, String> FULL_SCAN = createField(DSL.name("full_scan"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.statement_analysis.exec_count</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.err_count</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> ERR_COUNT = createField(DSL.name("err_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.warn_count</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> WARN_COUNT = createField(DSL.name("warn_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.total_latency</code>.
     */
    public final TableField<StatementAnalysisRecord, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statement_analysis.max_latency</code>.
     */
    public final TableField<StatementAnalysisRecord, String> MAX_LATENCY = createField(DSL.name("max_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statement_analysis.avg_latency</code>.
     */
    public final TableField<StatementAnalysisRecord, String> AVG_LATENCY = createField(DSL.name("avg_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statement_analysis.lock_latency</code>.
     */
    public final TableField<StatementAnalysisRecord, String> LOCK_LATENCY = createField(DSL.name("lock_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_sent</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> ROWS_SENT = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_sent_avg</code>.
     */
    public final TableField<StatementAnalysisRecord, BigInteger> ROWS_SENT_AVG = createField(DSL.name("rows_sent_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_examined</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> ROWS_EXAMINED = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_examined_avg</code>.
     */
    public final TableField<StatementAnalysisRecord, BigInteger> ROWS_EXAMINED_AVG = createField(DSL.name("rows_examined_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_affected</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> ROWS_AFFECTED = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_affected_avg</code>.
     */
    public final TableField<StatementAnalysisRecord, BigInteger> ROWS_AFFECTED_AVG = createField(DSL.name("rows_affected_avg"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statement_analysis.tmp_tables</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> TMP_TABLES = createField(DSL.name("tmp_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.tmp_disk_tables</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> TMP_DISK_TABLES = createField(DSL.name("tmp_disk_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.rows_sorted</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> ROWS_SORTED = createField(DSL.name("rows_sorted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.sort_merge_passes</code>.
     */
    public final TableField<StatementAnalysisRecord, ULong> SORT_MERGE_PASSES = createField(DSL.name("sort_merge_passes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statement_analysis.digest</code>.
     */
    public final TableField<StatementAnalysisRecord, String> DIGEST = createField(DSL.name("digest"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statement_analysis.first_seen</code>.
     */
    public final TableField<StatementAnalysisRecord, LocalDateTime> FIRST_SEEN = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00.000000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys.statement_analysis.last_seen</code>.
     */
    public final TableField<StatementAnalysisRecord, LocalDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00.000000", SQLDataType.LOCALDATETIME)), this, "");

    private StatementAnalysis(Name alias, Table<StatementAnalysisRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatementAnalysis(Name alias, Table<StatementAnalysisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `statement_analysis` as select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,if(((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0)),'*','') AS `full_scan`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ERRORS` AS `err_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_WARNINGS` AS `warn_count`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`MAX_TIMER_WAIT`) AS `max_latency`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`AVG_TIMER_WAIT`) AS `avg_latency`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_LOCK_TIME`) AS `lock_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_sent_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` AS `rows_affected`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_AFFECTED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `rows_affected_avg`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `tmp_disk_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen` from `performance_schema`.`events_statements_summary_by_digest` order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc"));
    }

    /**
     * Create an aliased <code>sys.statement_analysis</code> table reference
     */
    public StatementAnalysis(String alias) {
        this(DSL.name(alias), STATEMENT_ANALYSIS);
    }

    /**
     * Create an aliased <code>sys.statement_analysis</code> table reference
     */
    public StatementAnalysis(Name alias) {
        this(alias, STATEMENT_ANALYSIS);
    }

    /**
     * Create a <code>sys.statement_analysis</code> table reference
     */
    public StatementAnalysis() {
        this(DSL.name("statement_analysis"), null);
    }

    public <O extends Record> StatementAnalysis(Table<O> child, ForeignKey<O, StatementAnalysisRecord> key) {
        super(child, key, STATEMENT_ANALYSIS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public StatementAnalysis as(String alias) {
        return new StatementAnalysis(DSL.name(alias), this);
    }

    @Override
    public StatementAnalysis as(Name alias) {
        return new StatementAnalysis(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementAnalysis rename(String name) {
        return new StatementAnalysis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementAnalysis rename(Name name) {
        return new StatementAnalysis(name, null);
    }
}
