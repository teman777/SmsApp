/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.IoByThreadByLatencyRecord;

import java.math.BigInteger;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IoByThreadByLatency extends TableImpl<IoByThreadByLatencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.io_by_thread_by_latency</code>
     */
    public static final IoByThreadByLatency IO_BY_THREAD_BY_LATENCY = new IoByThreadByLatency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IoByThreadByLatencyRecord> getRecordType() {
        return IoByThreadByLatencyRecord.class;
    }

    /**
     * The column <code>sys.io_by_thread_by_latency.user</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(288), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.total</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, BigInteger> TOTAL = createField(DSL.name("total"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.total_latency</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.min_latency</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, String> MIN_LATENCY = createField(DSL.name("min_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.avg_latency</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, String> AVG_LATENCY = createField(DSL.name("avg_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.max_latency</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, String> MAX_LATENCY = createField(DSL.name("max_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.thread_id</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, ULong> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.io_by_thread_by_latency.processlist_id</code>.
     */
    public final TableField<IoByThreadByLatencyRecord, ULong> PROCESSLIST_ID = createField(DSL.name("processlist_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    private IoByThreadByLatency(Name alias, Table<IoByThreadByLatencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private IoByThreadByLatency(Name alias, Table<IoByThreadByLatencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `io_by_thread_by_latency` as select if((`performance_schema`.`threads`.`PROCESSLIST_ID` is null),substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),concat(`performance_schema`.`threads`.`PROCESSLIST_USER`,'@',convert(`performance_schema`.`threads`.`PROCESSLIST_HOST` using utf8mb4))) AS `user`,sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`COUNT_STAR`) AS `total`,format_pico_time(sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,format_pico_time(min(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MIN_TIMER_WAIT`)) AS `min_latency`,format_pico_time(avg(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`AVG_TIMER_WAIT`)) AS `avg_latency`,format_pico_time(max(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency`,`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` AS `thread_id`,`performance_schema`.`threads`.`PROCESSLIST_ID` AS `processlist_id` from (`performance_schema`.`events_waits_summary_by_thread_by_event_name` left join `performance_schema`.`threads` on((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) where ((`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`EVENT_NAME` like 'wait/io/file/%') and (`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT` > 0)) group by `performance_schema`.`events_waits_summary_by_thread_by_event_name`.`THREAD_ID`,`performance_schema`.`threads`.`PROCESSLIST_ID`,`user` order by sum(`performance_schema`.`events_waits_summary_by_thread_by_event_name`.`SUM_TIMER_WAIT`) desc"));
    }

    /**
     * Create an aliased <code>sys.io_by_thread_by_latency</code> table reference
     */
    public IoByThreadByLatency(String alias) {
        this(DSL.name(alias), IO_BY_THREAD_BY_LATENCY);
    }

    /**
     * Create an aliased <code>sys.io_by_thread_by_latency</code> table reference
     */
    public IoByThreadByLatency(Name alias) {
        this(alias, IO_BY_THREAD_BY_LATENCY);
    }

    /**
     * Create a <code>sys.io_by_thread_by_latency</code> table reference
     */
    public IoByThreadByLatency() {
        this(DSL.name("io_by_thread_by_latency"), null);
    }

    public <O extends Record> IoByThreadByLatency(Table<O> child, ForeignKey<O, IoByThreadByLatencyRecord> key) {
        super(child, key, IO_BY_THREAD_BY_LATENCY);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public IoByThreadByLatency as(String alias) {
        return new IoByThreadByLatency(DSL.name(alias), this);
    }

    @Override
    public IoByThreadByLatency as(Name alias) {
        return new IoByThreadByLatency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IoByThreadByLatency rename(String name) {
        return new IoByThreadByLatency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IoByThreadByLatency rename(Name name) {
        return new IoByThreadByLatency(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, BigInteger, String, String, String, String, ULong, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
