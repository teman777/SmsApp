/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.information_schema.tables;


import com.artemvoronov.SmsApp.generated.information_schema.InformationSchema;
import com.artemvoronov.SmsApp.generated.information_schema.tables.records.ColumnStatisticsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnStatistics extends TableImpl<ColumnStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.COLUMN_STATISTICS</code>
     */
    public static final ColumnStatistics COLUMN_STATISTICS = new ColumnStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnStatisticsRecord> getRecordType() {
        return ColumnStatisticsRecord.class;
    }

    /**
     * The column <code>information_schema.COLUMN_STATISTICS.SCHEMA_NAME</code>.
     */
    public final TableField<ColumnStatisticsRecord, String> SCHEMA_NAME = createField(DSL.name("SCHEMA_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMN_STATISTICS.TABLE_NAME</code>.
     */
    public final TableField<ColumnStatisticsRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMN_STATISTICS.COLUMN_NAME</code>.
     */
    public final TableField<ColumnStatisticsRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMN_STATISTICS.HISTOGRAM</code>.
     */
    public final TableField<ColumnStatisticsRecord, JSON> HISTOGRAM = createField(DSL.name("HISTOGRAM"), SQLDataType.JSON.nullable(false), this, "");

    private ColumnStatistics(Name alias, Table<ColumnStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ColumnStatistics(Name alias, Table<ColumnStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.COLUMN_STATISTICS</code> table reference
     */
    public ColumnStatistics(String alias) {
        this(DSL.name(alias), COLUMN_STATISTICS);
    }

    /**
     * Create an aliased <code>information_schema.COLUMN_STATISTICS</code> table reference
     */
    public ColumnStatistics(Name alias) {
        this(alias, COLUMN_STATISTICS);
    }

    /**
     * Create a <code>information_schema.COLUMN_STATISTICS</code> table reference
     */
    public ColumnStatistics() {
        this(DSL.name("COLUMN_STATISTICS"), null);
    }

    public <O extends Record> ColumnStatistics(Table<O> child, ForeignKey<O, ColumnStatisticsRecord> key) {
        super(child, key, COLUMN_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ColumnStatistics as(String alias) {
        return new ColumnStatistics(DSL.name(alias), this);
    }

    @Override
    public ColumnStatistics as(Name alias) {
        return new ColumnStatistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnStatistics rename(String name) {
        return new ColumnStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnStatistics rename(Name name) {
        return new ColumnStatistics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
