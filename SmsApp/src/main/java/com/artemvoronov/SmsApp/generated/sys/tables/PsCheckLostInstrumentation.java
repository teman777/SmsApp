/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.PsCheckLostInstrumentationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsCheckLostInstrumentation extends TableImpl<PsCheckLostInstrumentationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.ps_check_lost_instrumentation</code>
     */
    public static final PsCheckLostInstrumentation PS_CHECK_LOST_INSTRUMENTATION = new PsCheckLostInstrumentation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PsCheckLostInstrumentationRecord> getRecordType() {
        return PsCheckLostInstrumentationRecord.class;
    }

    /**
     * The column <code>sys.ps_check_lost_instrumentation.variable_name</code>.
     */
    public final TableField<PsCheckLostInstrumentationRecord, String> VARIABLE_NAME = createField(DSL.name("variable_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>sys.ps_check_lost_instrumentation.variable_value</code>.
     */
    public final TableField<PsCheckLostInstrumentationRecord, String> VARIABLE_VALUE = createField(DSL.name("variable_value"), SQLDataType.VARCHAR(1024), this, "");

    private PsCheckLostInstrumentation(Name alias, Table<PsCheckLostInstrumentationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsCheckLostInstrumentation(Name alias, Table<PsCheckLostInstrumentationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `ps_check_lost_instrumentation` as select `performance_schema`.`global_status`.`VARIABLE_NAME` AS `variable_name`,`performance_schema`.`global_status`.`VARIABLE_VALUE` AS `variable_value` from `performance_schema`.`global_status` where ((`performance_schema`.`global_status`.`VARIABLE_NAME` like 'perf%lost') and (`performance_schema`.`global_status`.`VARIABLE_VALUE` > 0))"));
    }

    /**
     * Create an aliased <code>sys.ps_check_lost_instrumentation</code> table reference
     */
    public PsCheckLostInstrumentation(String alias) {
        this(DSL.name(alias), PS_CHECK_LOST_INSTRUMENTATION);
    }

    /**
     * Create an aliased <code>sys.ps_check_lost_instrumentation</code> table reference
     */
    public PsCheckLostInstrumentation(Name alias) {
        this(alias, PS_CHECK_LOST_INSTRUMENTATION);
    }

    /**
     * Create a <code>sys.ps_check_lost_instrumentation</code> table reference
     */
    public PsCheckLostInstrumentation() {
        this(DSL.name("ps_check_lost_instrumentation"), null);
    }

    public <O extends Record> PsCheckLostInstrumentation(Table<O> child, ForeignKey<O, PsCheckLostInstrumentationRecord> key) {
        super(child, key, PS_CHECK_LOST_INSTRUMENTATION);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public PsCheckLostInstrumentation as(String alias) {
        return new PsCheckLostInstrumentation(DSL.name(alias), this);
    }

    @Override
    public PsCheckLostInstrumentation as(Name alias) {
        return new PsCheckLostInstrumentation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PsCheckLostInstrumentation rename(String name) {
        return new PsCheckLostInstrumentation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PsCheckLostInstrumentation rename(Name name) {
        return new PsCheckLostInstrumentation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
