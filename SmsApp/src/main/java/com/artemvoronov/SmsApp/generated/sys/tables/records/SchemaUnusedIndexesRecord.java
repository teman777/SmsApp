/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables.records;


import com.artemvoronov.SmsApp.generated.sys.tables.SchemaUnusedIndexes;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaUnusedIndexesRecord extends TableRecordImpl<SchemaUnusedIndexesRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sys.schema_unused_indexes.object_schema</code>.
     */
    public void setObjectSchema(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sys.schema_unused_indexes.object_schema</code>.
     */
    public String getObjectSchema() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sys.schema_unused_indexes.object_name</code>.
     */
    public void setObjectName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>sys.schema_unused_indexes.object_name</code>.
     */
    public String getObjectName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sys.schema_unused_indexes.index_name</code>.
     */
    public void setIndexName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>sys.schema_unused_indexes.index_name</code>.
     */
    public String getIndexName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SchemaUnusedIndexes.SCHEMA_UNUSED_INDEXES.OBJECT_SCHEMA;
    }

    @Override
    public Field<String> field2() {
        return SchemaUnusedIndexes.SCHEMA_UNUSED_INDEXES.OBJECT_NAME;
    }

    @Override
    public Field<String> field3() {
        return SchemaUnusedIndexes.SCHEMA_UNUSED_INDEXES.INDEX_NAME;
    }

    @Override
    public String component1() {
        return getObjectSchema();
    }

    @Override
    public String component2() {
        return getObjectName();
    }

    @Override
    public String component3() {
        return getIndexName();
    }

    @Override
    public String value1() {
        return getObjectSchema();
    }

    @Override
    public String value2() {
        return getObjectName();
    }

    @Override
    public String value3() {
        return getIndexName();
    }

    @Override
    public SchemaUnusedIndexesRecord value1(String value) {
        setObjectSchema(value);
        return this;
    }

    @Override
    public SchemaUnusedIndexesRecord value2(String value) {
        setObjectName(value);
        return this;
    }

    @Override
    public SchemaUnusedIndexesRecord value3(String value) {
        setIndexName(value);
        return this;
    }

    @Override
    public SchemaUnusedIndexesRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaUnusedIndexesRecord
     */
    public SchemaUnusedIndexesRecord() {
        super(SchemaUnusedIndexes.SCHEMA_UNUSED_INDEXES);
    }

    /**
     * Create a detached, initialised SchemaUnusedIndexesRecord
     */
    public SchemaUnusedIndexesRecord(String objectSchema, String objectName, String indexName) {
        super(SchemaUnusedIndexes.SCHEMA_UNUSED_INDEXES);

        setObjectSchema(objectSchema);
        setObjectName(objectName);
        setIndexName(indexName);
    }
}
