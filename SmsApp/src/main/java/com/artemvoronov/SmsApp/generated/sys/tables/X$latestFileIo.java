/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.X$latestFileIoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$latestFileIo extends TableImpl<X$latestFileIoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.x$latest_file_io</code>
     */
    public static final X$latestFileIo X$LATEST_FILE_IO = new X$latestFileIo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$latestFileIoRecord> getRecordType() {
        return X$latestFileIoRecord.class;
    }

    /**
     * The column <code>sys.x$latest_file_io.thread</code>.
     */
    public final TableField<X$latestFileIoRecord, String> THREAD = createField(DSL.name("thread"), SQLDataType.VARCHAR(316), this, "");

    /**
     * The column <code>sys.x$latest_file_io.file</code>.
     */
    public final TableField<X$latestFileIoRecord, String> FILE = createField(DSL.name("file"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>sys.x$latest_file_io.latency</code>.
     */
    public final TableField<X$latestFileIoRecord, ULong> LATENCY = createField(DSL.name("latency"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>sys.x$latest_file_io.operation</code>.
     */
    public final TableField<X$latestFileIoRecord, String> OPERATION = createField(DSL.name("operation"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sys.x$latest_file_io.requested</code>.
     */
    public final TableField<X$latestFileIoRecord, Long> REQUESTED = createField(DSL.name("requested"), SQLDataType.BIGINT, this, "");

    private X$latestFileIo(Name alias, Table<X$latestFileIoRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$latestFileIo(Name alias, Table<X$latestFileIoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$latest_file_io` as select if((`processlist`.`ID` is null),concat(substring_index(`performance_schema`.`threads`.`NAME`,'/',-(1)),':',`performance_schema`.`events_waits_history_long`.`THREAD_ID`),convert(concat(`processlist`.`USER`,'@',`processlist`.`HOST`,':',`processlist`.`ID`) using utf8mb4)) AS `thread`,`performance_schema`.`events_waits_history_long`.`OBJECT_NAME` AS `file`,`performance_schema`.`events_waits_history_long`.`TIMER_WAIT` AS `latency`,`performance_schema`.`events_waits_history_long`.`OPERATION` AS `operation`,`performance_schema`.`events_waits_history_long`.`NUMBER_OF_BYTES` AS `requested` from ((`performance_schema`.`events_waits_history_long` join `performance_schema`.`threads` on((`performance_schema`.`events_waits_history_long`.`THREAD_ID` = `performance_schema`.`threads`.`THREAD_ID`))) left join `information_schema`.`PROCESSLIST` `processlist` on((`performance_schema`.`threads`.`PROCESSLIST_ID` = `processlist`.`ID`))) where ((`performance_schema`.`events_waits_history_long`.`OBJECT_NAME` is not null) and (`performance_schema`.`events_waits_history_long`.`EVENT_NAME` like 'wait/io/file/%')) order by `performance_schema`.`events_waits_history_long`.`TIMER_START`"));
    }

    /**
     * Create an aliased <code>sys.x$latest_file_io</code> table reference
     */
    public X$latestFileIo(String alias) {
        this(DSL.name(alias), X$LATEST_FILE_IO);
    }

    /**
     * Create an aliased <code>sys.x$latest_file_io</code> table reference
     */
    public X$latestFileIo(Name alias) {
        this(alias, X$LATEST_FILE_IO);
    }

    /**
     * Create a <code>sys.x$latest_file_io</code> table reference
     */
    public X$latestFileIo() {
        this(DSL.name("x$latest_file_io"), null);
    }

    public <O extends Record> X$latestFileIo(Table<O> child, ForeignKey<O, X$latestFileIoRecord> key) {
        super(child, key, X$LATEST_FILE_IO);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$latestFileIo as(String alias) {
        return new X$latestFileIo(DSL.name(alias), this);
    }

    @Override
    public X$latestFileIo as(Name alias) {
        return new X$latestFileIo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$latestFileIo rename(String name) {
        return new X$latestFileIo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$latestFileIo rename(Name name) {
        return new X$latestFileIo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, ULong, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
