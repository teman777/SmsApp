/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.information_schema.tables;


import com.artemvoronov.SmsApp.generated.information_schema.InformationSchema;
import com.artemvoronov.SmsApp.generated.information_schema.tables.records.InnodbIndexesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbIndexes extends TableImpl<InnodbIndexesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.INNODB_INDEXES</code>
     */
    public static final InnodbIndexes INNODB_INDEXES = new InnodbIndexes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbIndexesRecord> getRecordType() {
        return InnodbIndexesRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_INDEXES.INDEX_ID</code>.
     */
    public final TableField<InnodbIndexesRecord, ULong> INDEX_ID = createField(DSL.name("INDEX_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.NAME</code>.
     */
    public final TableField<InnodbIndexesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.TABLE_ID</code>.
     */
    public final TableField<InnodbIndexesRecord, ULong> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.TYPE</code>.
     */
    public final TableField<InnodbIndexesRecord, Integer> TYPE = createField(DSL.name("TYPE"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.N_FIELDS</code>.
     */
    public final TableField<InnodbIndexesRecord, Integer> N_FIELDS = createField(DSL.name("N_FIELDS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.PAGE_NO</code>.
     */
    public final TableField<InnodbIndexesRecord, Integer> PAGE_NO = createField(DSL.name("PAGE_NO"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.SPACE</code>.
     */
    public final TableField<InnodbIndexesRecord, Integer> SPACE = createField(DSL.name("SPACE"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_INDEXES.MERGE_THRESHOLD</code>.
     */
    public final TableField<InnodbIndexesRecord, Integer> MERGE_THRESHOLD = createField(DSL.name("MERGE_THRESHOLD"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "");

    private InnodbIndexes(Name alias, Table<InnodbIndexesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbIndexes(Name alias, Table<InnodbIndexesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_INDEXES</code> table reference
     */
    public InnodbIndexes(String alias) {
        this(DSL.name(alias), INNODB_INDEXES);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_INDEXES</code> table reference
     */
    public InnodbIndexes(Name alias) {
        this(alias, INNODB_INDEXES);
    }

    /**
     * Create a <code>information_schema.INNODB_INDEXES</code> table reference
     */
    public InnodbIndexes() {
        this(DSL.name("INNODB_INDEXES"), null);
    }

    public <O extends Record> InnodbIndexes(Table<O> child, ForeignKey<O, InnodbIndexesRecord> key) {
        super(child, key, INNODB_INDEXES);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbIndexes as(String alias) {
        return new InnodbIndexes(DSL.name(alias), this);
    }

    @Override
    public InnodbIndexes as(Name alias) {
        return new InnodbIndexes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbIndexes rename(String name) {
        return new InnodbIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbIndexes rename(Name name) {
        return new InnodbIndexes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, ULong, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
