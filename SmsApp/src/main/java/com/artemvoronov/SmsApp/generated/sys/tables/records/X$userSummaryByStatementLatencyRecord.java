/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables.records;


import com.artemvoronov.SmsApp.generated.sys.tables.X$userSummaryByStatementLatency;

import java.math.BigInteger;

import org.jooq.Field;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$userSummaryByStatementLatencyRecord extends TableRecordImpl<X$userSummaryByStatementLatencyRecord> implements Record9<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.user</code>.
     */
    public void setUser(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.user</code>.
     */
    public String getUser() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.total</code>.
     */
    public void setTotal(BigInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.total</code>.
     */
    public BigInteger getTotal() {
        return (BigInteger) get(1);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.total_latency</code>.
     */
    public void setTotalLatency(BigInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.total_latency</code>.
     */
    public BigInteger getTotalLatency() {
        return (BigInteger) get(2);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.max_latency</code>.
     */
    public void setMaxLatency(BigInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.max_latency</code>.
     */
    public BigInteger getMaxLatency() {
        return (BigInteger) get(3);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.lock_latency</code>.
     */
    public void setLockLatency(BigInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.lock_latency</code>.
     */
    public BigInteger getLockLatency() {
        return (BigInteger) get(4);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.rows_sent</code>.
     */
    public void setRowsSent(BigInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.rows_sent</code>.
     */
    public BigInteger getRowsSent() {
        return (BigInteger) get(5);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.rows_examined</code>.
     */
    public void setRowsExamined(BigInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.rows_examined</code>.
     */
    public BigInteger getRowsExamined() {
        return (BigInteger) get(6);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.rows_affected</code>.
     */
    public void setRowsAffected(BigInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.rows_affected</code>.
     */
    public BigInteger getRowsAffected() {
        return (BigInteger) get(7);
    }

    /**
     * Setter for <code>sys.x$user_summary_by_statement_latency.full_scans</code>.
     */
    public void setFullScans(BigInteger value) {
        set(8, value);
    }

    /**
     * Getter for <code>sys.x$user_summary_by_statement_latency.full_scans</code>.
     */
    public BigInteger getFullScans() {
        return (BigInteger) get(8);
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.USER;
    }

    @Override
    public Field<BigInteger> field2() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.TOTAL;
    }

    @Override
    public Field<BigInteger> field3() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.TOTAL_LATENCY;
    }

    @Override
    public Field<BigInteger> field4() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.MAX_LATENCY;
    }

    @Override
    public Field<BigInteger> field5() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.LOCK_LATENCY;
    }

    @Override
    public Field<BigInteger> field6() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.ROWS_SENT;
    }

    @Override
    public Field<BigInteger> field7() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.ROWS_EXAMINED;
    }

    @Override
    public Field<BigInteger> field8() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.ROWS_AFFECTED;
    }

    @Override
    public Field<BigInteger> field9() {
        return X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY.FULL_SCANS;
    }

    @Override
    public String component1() {
        return getUser();
    }

    @Override
    public BigInteger component2() {
        return getTotal();
    }

    @Override
    public BigInteger component3() {
        return getTotalLatency();
    }

    @Override
    public BigInteger component4() {
        return getMaxLatency();
    }

    @Override
    public BigInteger component5() {
        return getLockLatency();
    }

    @Override
    public BigInteger component6() {
        return getRowsSent();
    }

    @Override
    public BigInteger component7() {
        return getRowsExamined();
    }

    @Override
    public BigInteger component8() {
        return getRowsAffected();
    }

    @Override
    public BigInteger component9() {
        return getFullScans();
    }

    @Override
    public String value1() {
        return getUser();
    }

    @Override
    public BigInteger value2() {
        return getTotal();
    }

    @Override
    public BigInteger value3() {
        return getTotalLatency();
    }

    @Override
    public BigInteger value4() {
        return getMaxLatency();
    }

    @Override
    public BigInteger value5() {
        return getLockLatency();
    }

    @Override
    public BigInteger value6() {
        return getRowsSent();
    }

    @Override
    public BigInteger value7() {
        return getRowsExamined();
    }

    @Override
    public BigInteger value8() {
        return getRowsAffected();
    }

    @Override
    public BigInteger value9() {
        return getFullScans();
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value1(String value) {
        setUser(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value2(BigInteger value) {
        setTotal(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value3(BigInteger value) {
        setTotalLatency(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value4(BigInteger value) {
        setMaxLatency(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value5(BigInteger value) {
        setLockLatency(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value6(BigInteger value) {
        setRowsSent(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value7(BigInteger value) {
        setRowsExamined(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value8(BigInteger value) {
        setRowsAffected(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord value9(BigInteger value) {
        setFullScans(value);
        return this;
    }

    @Override
    public X$userSummaryByStatementLatencyRecord values(String value1, BigInteger value2, BigInteger value3, BigInteger value4, BigInteger value5, BigInteger value6, BigInteger value7, BigInteger value8, BigInteger value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached X$userSummaryByStatementLatencyRecord
     */
    public X$userSummaryByStatementLatencyRecord() {
        super(X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY);
    }

    /**
     * Create a detached, initialised X$userSummaryByStatementLatencyRecord
     */
    public X$userSummaryByStatementLatencyRecord(String user, BigInteger total, BigInteger totalLatency, BigInteger maxLatency, BigInteger lockLatency, BigInteger rowsSent, BigInteger rowsExamined, BigInteger rowsAffected, BigInteger fullScans) {
        super(X$userSummaryByStatementLatency.X$USER_SUMMARY_BY_STATEMENT_LATENCY);

        setUser(user);
        setTotal(total);
        setTotalLatency(totalLatency);
        setMaxLatency(maxLatency);
        setLockLatency(lockLatency);
        setRowsSent(rowsSent);
        setRowsExamined(rowsExamined);
        setRowsAffected(rowsAffected);
        setFullScans(fullScans);
    }
}
