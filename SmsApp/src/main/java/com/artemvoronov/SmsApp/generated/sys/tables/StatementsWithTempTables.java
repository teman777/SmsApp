/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.StatementsWithTempTablesRecord;

import java.math.BigInteger;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementsWithTempTables extends TableImpl<StatementsWithTempTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.statements_with_temp_tables</code>
     */
    public static final StatementsWithTempTables STATEMENTS_WITH_TEMP_TABLES = new StatementsWithTempTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementsWithTempTablesRecord> getRecordType() {
        return StatementsWithTempTablesRecord.class;
    }

    /**
     * The column <code>sys.statements_with_temp_tables.query</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.db</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> DB = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.exec_count</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.total_latency</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.memory_tmp_tables</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> MEMORY_TMP_TABLES = createField(DSL.name("memory_tmp_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.disk_tmp_tables</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> DISK_TMP_TABLES = createField(DSL.name("disk_tmp_tables"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.avg_tmp_tables_per_query</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, BigInteger> AVG_TMP_TABLES_PER_QUERY = createField(DSL.name("avg_tmp_tables_per_query"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.tmp_tables_to_disk_pct</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, BigInteger> TMP_TABLES_TO_DISK_PCT = createField(DSL.name("tmp_tables_to_disk_pct"), SQLDataType.DECIMAL_INTEGER(24).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.first_seen</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, LocalDateTime> FIRST_SEEN = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00.000000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.last_seen</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, LocalDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00.000000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.digest</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> DIGEST = createField(DSL.name("digest"), SQLDataType.VARCHAR(64), this, "");

    private StatementsWithTempTables(Name alias, Table<StatementsWithTempTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatementsWithTempTables(Name alias, Table<StatementsWithTempTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `statements_with_temp_tables` as select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` AS `memory_tmp_tables`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` AS `disk_tmp_tables`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_tmp_tables_per_query`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES`,0)),0) * 100),0) AS `tmp_tables_to_disk_pct`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_DISK_TABLES` desc,`performance_schema`.`events_statements_summary_by_digest`.`SUM_CREATED_TMP_TABLES` desc"));
    }

    /**
     * Create an aliased <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_TEMP_TABLES);
    }

    /**
     * Create an aliased <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables(Name alias) {
        this(alias, STATEMENTS_WITH_TEMP_TABLES);
    }

    /**
     * Create a <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables() {
        this(DSL.name("statements_with_temp_tables"), null);
    }

    public <O extends Record> StatementsWithTempTables(Table<O> child, ForeignKey<O, StatementsWithTempTablesRecord> key) {
        super(child, key, STATEMENTS_WITH_TEMP_TABLES);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public StatementsWithTempTables as(String alias) {
        return new StatementsWithTempTables(DSL.name(alias), this);
    }

    @Override
    public StatementsWithTempTables as(Name alias) {
        return new StatementsWithTempTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithTempTables rename(String name) {
        return new StatementsWithTempTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithTempTables rename(Name name) {
        return new StatementsWithTempTables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, ULong, String, ULong, ULong, BigInteger, BigInteger, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
