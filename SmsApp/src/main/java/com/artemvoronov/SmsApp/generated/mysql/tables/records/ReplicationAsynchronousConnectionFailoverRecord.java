/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.mysql.tables.records;


import com.artemvoronov.SmsApp.generated.mysql.tables.ReplicationAsynchronousConnectionFailover;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * The source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailoverRecord extends UpdatableRecordImpl<ReplicationAsynchronousConnectionFailoverRecord> implements Record6<String, String, UInteger, String, UByte, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>. The replication channel name that connects source and replica.
     */
    public void setChannelName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>. The replication channel name that connects source and replica.
     */
    public String getChannelName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Host</code>. The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public void setHost(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Host</code>. The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public String getHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Port</code>. The source port that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public void setPort(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Port</code>. The source port that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public UInteger getPort() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>. The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.
     */
    public void setNetworkNamespace(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>. The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.
     */
    public String getNetworkNamespace() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Weight</code>. The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.
     */
    public void setWeight(UByte value) {
        set(4, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Weight</code>. The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.
     */
    public UByte getWeight() {
        return (UByte) get(4);
    }

    /**
     * Setter for <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>. The name of the group which this server belongs to.
     */
    public void setManagedName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>. The name of the group which this server belongs to.
     */
    public String getManagedName() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record5<String, String, UInteger, String, String> key() {
        return (Record5) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, UInteger, String, UByte, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, String, UInteger, String, UByte, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.CHANNEL_NAME;
    }

    @Override
    public Field<String> field2() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.HOST;
    }

    @Override
    public Field<UInteger> field3() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.PORT;
    }

    @Override
    public Field<String> field4() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.NETWORK_NAMESPACE;
    }

    @Override
    public Field<UByte> field5() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.WEIGHT;
    }

    @Override
    public Field<String> field6() {
        return ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.MANAGED_NAME;
    }

    @Override
    public String component1() {
        return getChannelName();
    }

    @Override
    public String component2() {
        return getHost();
    }

    @Override
    public UInteger component3() {
        return getPort();
    }

    @Override
    public String component4() {
        return getNetworkNamespace();
    }

    @Override
    public UByte component5() {
        return getWeight();
    }

    @Override
    public String component6() {
        return getManagedName();
    }

    @Override
    public String value1() {
        return getChannelName();
    }

    @Override
    public String value2() {
        return getHost();
    }

    @Override
    public UInteger value3() {
        return getPort();
    }

    @Override
    public String value4() {
        return getNetworkNamespace();
    }

    @Override
    public UByte value5() {
        return getWeight();
    }

    @Override
    public String value6() {
        return getManagedName();
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value1(String value) {
        setChannelName(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value2(String value) {
        setHost(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value3(UInteger value) {
        setPort(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value4(String value) {
        setNetworkNamespace(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value5(UByte value) {
        setWeight(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord value6(String value) {
        setManagedName(value);
        return this;
    }

    @Override
    public ReplicationAsynchronousConnectionFailoverRecord values(String value1, String value2, UInteger value3, String value4, UByte value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReplicationAsynchronousConnectionFailoverRecord
     */
    public ReplicationAsynchronousConnectionFailoverRecord() {
        super(ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);
    }

    /**
     * Create a detached, initialised ReplicationAsynchronousConnectionFailoverRecord
     */
    public ReplicationAsynchronousConnectionFailoverRecord(String channelName, String host, UInteger port, String networkNamespace, UByte weight, String managedName) {
        super(ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);

        setChannelName(channelName);
        setHost(host);
        setPort(port);
        setNetworkNamespace(networkNamespace);
        setWeight(weight);
        setManagedName(managedName);
    }
}
