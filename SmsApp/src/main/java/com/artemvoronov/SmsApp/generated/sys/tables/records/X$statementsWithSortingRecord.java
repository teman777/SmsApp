/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables.records;


import com.artemvoronov.SmsApp.generated.sys.tables.X$statementsWithSorting;

import java.math.BigInteger;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$statementsWithSortingRecord extends TableRecordImpl<X$statementsWithSortingRecord> implements Record13<String, String, ULong, ULong, ULong, BigInteger, ULong, ULong, ULong, BigInteger, LocalDateTime, LocalDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sys.x$statements_with_sorting.query</code>.
     */
    public void setQuery(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.query</code>.
     */
    public String getQuery() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.db</code>.
     */
    public void setDb(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.db</code>.
     */
    public String getDb() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.exec_count</code>.
     */
    public void setExecCount(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.exec_count</code>.
     */
    public ULong getExecCount() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.total_latency</code>.
     */
    public void setTotalLatency(ULong value) {
        set(3, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.total_latency</code>.
     */
    public ULong getTotalLatency() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.sort_merge_passes</code>.
     */
    public void setSortMergePasses(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.sort_merge_passes</code>.
     */
    public ULong getSortMergePasses() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.avg_sort_merges</code>.
     */
    public void setAvgSortMerges(BigInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.avg_sort_merges</code>.
     */
    public BigInteger getAvgSortMerges() {
        return (BigInteger) get(5);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.sorts_using_scans</code>.
     */
    public void setSortsUsingScans(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.sorts_using_scans</code>.
     */
    public ULong getSortsUsingScans() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.sort_using_range</code>.
     */
    public void setSortUsingRange(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.sort_using_range</code>.
     */
    public ULong getSortUsingRange() {
        return (ULong) get(7);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.rows_sorted</code>.
     */
    public void setRowsSorted(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.rows_sorted</code>.
     */
    public ULong getRowsSorted() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.avg_rows_sorted</code>.
     */
    public void setAvgRowsSorted(BigInteger value) {
        set(9, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.avg_rows_sorted</code>.
     */
    public BigInteger getAvgRowsSorted() {
        return (BigInteger) get(9);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.first_seen</code>.
     */
    public void setFirstSeen(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.first_seen</code>.
     */
    public LocalDateTime getFirstSeen() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.last_seen</code>.
     */
    public void setLastSeen(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.last_seen</code>.
     */
    public LocalDateTime getLastSeen() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>sys.x$statements_with_sorting.digest</code>.
     */
    public void setDigest(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>sys.x$statements_with_sorting.digest</code>.
     */
    public String getDigest() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, ULong, ULong, ULong, BigInteger, ULong, ULong, ULong, BigInteger, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<String, String, ULong, ULong, ULong, BigInteger, ULong, ULong, ULong, BigInteger, LocalDateTime, LocalDateTime, String> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.QUERY;
    }

    @Override
    public Field<String> field2() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.DB;
    }

    @Override
    public Field<ULong> field3() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.EXEC_COUNT;
    }

    @Override
    public Field<ULong> field4() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.TOTAL_LATENCY;
    }

    @Override
    public Field<ULong> field5() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.SORT_MERGE_PASSES;
    }

    @Override
    public Field<BigInteger> field6() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.AVG_SORT_MERGES;
    }

    @Override
    public Field<ULong> field7() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.SORTS_USING_SCANS;
    }

    @Override
    public Field<ULong> field8() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.SORT_USING_RANGE;
    }

    @Override
    public Field<ULong> field9() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.ROWS_SORTED;
    }

    @Override
    public Field<BigInteger> field10() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.AVG_ROWS_SORTED;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.FIRST_SEEN;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.LAST_SEEN;
    }

    @Override
    public Field<String> field13() {
        return X$statementsWithSorting.X$STATEMENTS_WITH_SORTING.DIGEST;
    }

    @Override
    public String component1() {
        return getQuery();
    }

    @Override
    public String component2() {
        return getDb();
    }

    @Override
    public ULong component3() {
        return getExecCount();
    }

    @Override
    public ULong component4() {
        return getTotalLatency();
    }

    @Override
    public ULong component5() {
        return getSortMergePasses();
    }

    @Override
    public BigInteger component6() {
        return getAvgSortMerges();
    }

    @Override
    public ULong component7() {
        return getSortsUsingScans();
    }

    @Override
    public ULong component8() {
        return getSortUsingRange();
    }

    @Override
    public ULong component9() {
        return getRowsSorted();
    }

    @Override
    public BigInteger component10() {
        return getAvgRowsSorted();
    }

    @Override
    public LocalDateTime component11() {
        return getFirstSeen();
    }

    @Override
    public LocalDateTime component12() {
        return getLastSeen();
    }

    @Override
    public String component13() {
        return getDigest();
    }

    @Override
    public String value1() {
        return getQuery();
    }

    @Override
    public String value2() {
        return getDb();
    }

    @Override
    public ULong value3() {
        return getExecCount();
    }

    @Override
    public ULong value4() {
        return getTotalLatency();
    }

    @Override
    public ULong value5() {
        return getSortMergePasses();
    }

    @Override
    public BigInteger value6() {
        return getAvgSortMerges();
    }

    @Override
    public ULong value7() {
        return getSortsUsingScans();
    }

    @Override
    public ULong value8() {
        return getSortUsingRange();
    }

    @Override
    public ULong value9() {
        return getRowsSorted();
    }

    @Override
    public BigInteger value10() {
        return getAvgRowsSorted();
    }

    @Override
    public LocalDateTime value11() {
        return getFirstSeen();
    }

    @Override
    public LocalDateTime value12() {
        return getLastSeen();
    }

    @Override
    public String value13() {
        return getDigest();
    }

    @Override
    public X$statementsWithSortingRecord value1(String value) {
        setQuery(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value2(String value) {
        setDb(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value3(ULong value) {
        setExecCount(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value4(ULong value) {
        setTotalLatency(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value5(ULong value) {
        setSortMergePasses(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value6(BigInteger value) {
        setAvgSortMerges(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value7(ULong value) {
        setSortsUsingScans(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value8(ULong value) {
        setSortUsingRange(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value9(ULong value) {
        setRowsSorted(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value10(BigInteger value) {
        setAvgRowsSorted(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value11(LocalDateTime value) {
        setFirstSeen(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value12(LocalDateTime value) {
        setLastSeen(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord value13(String value) {
        setDigest(value);
        return this;
    }

    @Override
    public X$statementsWithSortingRecord values(String value1, String value2, ULong value3, ULong value4, ULong value5, BigInteger value6, ULong value7, ULong value8, ULong value9, BigInteger value10, LocalDateTime value11, LocalDateTime value12, String value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached X$statementsWithSortingRecord
     */
    public X$statementsWithSortingRecord() {
        super(X$statementsWithSorting.X$STATEMENTS_WITH_SORTING);
    }

    /**
     * Create a detached, initialised X$statementsWithSortingRecord
     */
    public X$statementsWithSortingRecord(String query, String db, ULong execCount, ULong totalLatency, ULong sortMergePasses, BigInteger avgSortMerges, ULong sortsUsingScans, ULong sortUsingRange, ULong rowsSorted, BigInteger avgRowsSorted, LocalDateTime firstSeen, LocalDateTime lastSeen, String digest) {
        super(X$statementsWithSorting.X$STATEMENTS_WITH_SORTING);

        setQuery(query);
        setDb(db);
        setExecCount(execCount);
        setTotalLatency(totalLatency);
        setSortMergePasses(sortMergePasses);
        setAvgSortMerges(avgSortMerges);
        setSortsUsingScans(sortsUsingScans);
        setSortUsingRange(sortUsingRange);
        setRowsSorted(rowsSorted);
        setAvgRowsSorted(avgRowsSorted);
        setFirstSeen(firstSeen);
        setLastSeen(lastSeen);
        setDigest(digest);
    }
}
