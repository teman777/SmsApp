/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.performance_schema.tables;


import com.artemvoronov.SmsApp.generated.performance_schema.PerformanceSchema;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.records.LogStatusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogStatus extends TableImpl<LogStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.log_status</code>
     */
    public static final LogStatus LOG_STATUS = new LogStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogStatusRecord> getRecordType() {
        return LogStatusRecord.class;
    }

    /**
     * The column <code>performance_schema.log_status.SERVER_UUID</code>.
     */
    public final TableField<LogStatusRecord, String> SERVER_UUID = createField(DSL.name("SERVER_UUID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>performance_schema.log_status.LOCAL</code>.
     */
    public final TableField<LogStatusRecord, JSON> LOCAL = createField(DSL.name("LOCAL"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>performance_schema.log_status.REPLICATION</code>.
     */
    public final TableField<LogStatusRecord, JSON> REPLICATION = createField(DSL.name("REPLICATION"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>performance_schema.log_status.STORAGE_ENGINES</code>.
     */
    public final TableField<LogStatusRecord, JSON> STORAGE_ENGINES = createField(DSL.name("STORAGE_ENGINES"), SQLDataType.JSON.nullable(false), this, "");

    private LogStatus(Name alias, Table<LogStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogStatus(Name alias, Table<LogStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.log_status</code> table reference
     */
    public LogStatus(String alias) {
        this(DSL.name(alias), LOG_STATUS);
    }

    /**
     * Create an aliased <code>performance_schema.log_status</code> table reference
     */
    public LogStatus(Name alias) {
        this(alias, LOG_STATUS);
    }

    /**
     * Create a <code>performance_schema.log_status</code> table reference
     */
    public LogStatus() {
        this(DSL.name("log_status"), null);
    }

    public <O extends Record> LogStatus(Table<O> child, ForeignKey<O, LogStatusRecord> key) {
        super(child, key, LOG_STATUS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public LogStatus as(String alias) {
        return new LogStatus(DSL.name(alias), this);
    }

    @Override
    public LogStatus as(Name alias) {
        return new LogStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogStatus rename(String name) {
        return new LogStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogStatus rename(Name name) {
        return new LogStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, JSON, JSON, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
