/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.UserSummaryByStatementTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSummaryByStatementType extends TableImpl<UserSummaryByStatementTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.user_summary_by_statement_type</code>
     */
    public static final UserSummaryByStatementType USER_SUMMARY_BY_STATEMENT_TYPE = new UserSummaryByStatementType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSummaryByStatementTypeRecord> getRecordType() {
        return UserSummaryByStatementTypeRecord.class;
    }

    /**
     * The column <code>sys.user_summary_by_statement_type.user</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.statement</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, String> STATEMENT = createField(DSL.name("statement"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.total</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, ULong> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.total_latency</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.max_latency</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, String> MAX_LATENCY = createField(DSL.name("max_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.lock_latency</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, String> LOCK_LATENCY = createField(DSL.name("lock_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.rows_sent</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, ULong> ROWS_SENT = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.rows_examined</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, ULong> ROWS_EXAMINED = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.rows_affected</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, ULong> ROWS_AFFECTED = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_type.full_scans</code>.
     */
    public final TableField<UserSummaryByStatementTypeRecord, ULong> FULL_SCANS = createField(DSL.name("full_scans"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    private UserSummaryByStatementType(Name alias, Table<UserSummaryByStatementTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSummaryByStatementType(Name alias, Table<UserSummaryByStatementTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `user_summary_by_statement_type` as select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,substring_index(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`EVENT_NAME`,'/',-(1)) AS `statement`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR` AS `total`,format_pico_time(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) AS `total_latency`,format_pico_time(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`) AS `max_latency`,format_pico_time(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME`) AS `lock_latency`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED` AS `rows_examined`,`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED` AS `rows_affected`,(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED` + `performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` where (`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` <> 0) order by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`),`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT` desc"));
    }

    /**
     * Create an aliased <code>sys.user_summary_by_statement_type</code> table reference
     */
    public UserSummaryByStatementType(String alias) {
        this(DSL.name(alias), USER_SUMMARY_BY_STATEMENT_TYPE);
    }

    /**
     * Create an aliased <code>sys.user_summary_by_statement_type</code> table reference
     */
    public UserSummaryByStatementType(Name alias) {
        this(alias, USER_SUMMARY_BY_STATEMENT_TYPE);
    }

    /**
     * Create a <code>sys.user_summary_by_statement_type</code> table reference
     */
    public UserSummaryByStatementType() {
        this(DSL.name("user_summary_by_statement_type"), null);
    }

    public <O extends Record> UserSummaryByStatementType(Table<O> child, ForeignKey<O, UserSummaryByStatementTypeRecord> key) {
        super(child, key, USER_SUMMARY_BY_STATEMENT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public UserSummaryByStatementType as(String alias) {
        return new UserSummaryByStatementType(DSL.name(alias), this);
    }

    @Override
    public UserSummaryByStatementType as(Name alias) {
        return new UserSummaryByStatementType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSummaryByStatementType rename(String name) {
        return new UserSummaryByStatementType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSummaryByStatementType rename(Name name) {
        return new UserSummaryByStatementType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, ULong, String, String, String, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
