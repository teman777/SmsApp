/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.MemoryByUserByCurrentBytesRecord;

import java.math.BigInteger;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemoryByUserByCurrentBytes extends TableImpl<MemoryByUserByCurrentBytesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.memory_by_user_by_current_bytes</code>
     */
    public static final MemoryByUserByCurrentBytes MEMORY_BY_USER_BY_CURRENT_BYTES = new MemoryByUserByCurrentBytes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemoryByUserByCurrentBytesRecord> getRecordType() {
        return MemoryByUserByCurrentBytesRecord.class;
    }

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.user</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.current_count_used</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, BigInteger> CURRENT_COUNT_USED = createField(DSL.name("current_count_used"), SQLDataType.DECIMAL_INTEGER(41), this, "");

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.current_allocated</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, String> CURRENT_ALLOCATED = createField(DSL.name("current_allocated"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.current_avg_alloc</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, String> CURRENT_AVG_ALLOC = createField(DSL.name("current_avg_alloc"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.current_max_alloc</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, String> CURRENT_MAX_ALLOC = createField(DSL.name("current_max_alloc"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.memory_by_user_by_current_bytes.total_allocated</code>.
     */
    public final TableField<MemoryByUserByCurrentBytesRecord, String> TOTAL_ALLOCATED = createField(DSL.name("total_allocated"), SQLDataType.VARCHAR(11), this, "");

    private MemoryByUserByCurrentBytes(Name alias, Table<MemoryByUserByCurrentBytesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemoryByUserByCurrentBytes(Name alias, Table<MemoryByUserByCurrentBytesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `memory_by_user_by_current_bytes` as select if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`) AS `current_count_used`,format_bytes(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_allocated`,format_bytes(ifnull((sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) / nullif(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_COUNT_USED`),0)),0)) AS `current_avg_alloc`,format_bytes(max(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`)) AS `current_max_alloc`,format_bytes(sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`SUM_NUMBER_OF_BYTES_ALLOC`)) AS `total_allocated` from `performance_schema`.`memory_summary_by_user_by_event_name` group by if((`performance_schema`.`memory_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`memory_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`memory_summary_by_user_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED`) desc"));
    }

    /**
     * Create an aliased <code>sys.memory_by_user_by_current_bytes</code> table reference
     */
    public MemoryByUserByCurrentBytes(String alias) {
        this(DSL.name(alias), MEMORY_BY_USER_BY_CURRENT_BYTES);
    }

    /**
     * Create an aliased <code>sys.memory_by_user_by_current_bytes</code> table reference
     */
    public MemoryByUserByCurrentBytes(Name alias) {
        this(alias, MEMORY_BY_USER_BY_CURRENT_BYTES);
    }

    /**
     * Create a <code>sys.memory_by_user_by_current_bytes</code> table reference
     */
    public MemoryByUserByCurrentBytes() {
        this(DSL.name("memory_by_user_by_current_bytes"), null);
    }

    public <O extends Record> MemoryByUserByCurrentBytes(Table<O> child, ForeignKey<O, MemoryByUserByCurrentBytesRecord> key) {
        super(child, key, MEMORY_BY_USER_BY_CURRENT_BYTES);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public MemoryByUserByCurrentBytes as(String alias) {
        return new MemoryByUserByCurrentBytes(DSL.name(alias), this);
    }

    @Override
    public MemoryByUserByCurrentBytes as(Name alias) {
        return new MemoryByUserByCurrentBytes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemoryByUserByCurrentBytes rename(String name) {
        return new MemoryByUserByCurrentBytes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemoryByUserByCurrentBytes rename(Name name) {
        return new MemoryByUserByCurrentBytes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, BigInteger, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
