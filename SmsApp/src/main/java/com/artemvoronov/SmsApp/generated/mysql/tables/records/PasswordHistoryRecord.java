/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.mysql.tables.records;


import com.artemvoronov.SmsApp.generated.mysql.tables.PasswordHistory;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Password history for user accounts
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordHistoryRecord extends UpdatableRecordImpl<PasswordHistoryRecord> implements Record4<String, String, LocalDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.password_history.Host</code>.
     */
    public void setHost(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>mysql.password_history.Host</code>.
     */
    public String getHost() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.password_history.User</code>.
     */
    public void setUser(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mysql.password_history.User</code>.
     */
    public String getUser() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public void setPasswordTimestamp(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public LocalDateTime getPasswordTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>mysql.password_history.Password</code>.
     */
    public void setPassword(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>mysql.password_history.Password</code>.
     */
    public String getPassword() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, LocalDateTime> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, LocalDateTime, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return PasswordHistory.PASSWORD_HISTORY.HOST;
    }

    @Override
    public Field<String> field2() {
        return PasswordHistory.PASSWORD_HISTORY.USER;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return PasswordHistory.PASSWORD_HISTORY.PASSWORD_TIMESTAMP;
    }

    @Override
    public Field<String> field4() {
        return PasswordHistory.PASSWORD_HISTORY.PASSWORD;
    }

    @Override
    public String component1() {
        return getHost();
    }

    @Override
    public String component2() {
        return getUser();
    }

    @Override
    public LocalDateTime component3() {
        return getPasswordTimestamp();
    }

    @Override
    public String component4() {
        return getPassword();
    }

    @Override
    public String value1() {
        return getHost();
    }

    @Override
    public String value2() {
        return getUser();
    }

    @Override
    public LocalDateTime value3() {
        return getPasswordTimestamp();
    }

    @Override
    public String value4() {
        return getPassword();
    }

    @Override
    public PasswordHistoryRecord value1(String value) {
        setHost(value);
        return this;
    }

    @Override
    public PasswordHistoryRecord value2(String value) {
        setUser(value);
        return this;
    }

    @Override
    public PasswordHistoryRecord value3(LocalDateTime value) {
        setPasswordTimestamp(value);
        return this;
    }

    @Override
    public PasswordHistoryRecord value4(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public PasswordHistoryRecord values(String value1, String value2, LocalDateTime value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PasswordHistoryRecord
     */
    public PasswordHistoryRecord() {
        super(PasswordHistory.PASSWORD_HISTORY);
    }

    /**
     * Create a detached, initialised PasswordHistoryRecord
     */
    public PasswordHistoryRecord(String host, String user, LocalDateTime passwordTimestamp, String password) {
        super(PasswordHistory.PASSWORD_HISTORY);

        setHost(host);
        setUser(user);
        setPasswordTimestamp(passwordTimestamp);
        setPassword(password);
    }
}
