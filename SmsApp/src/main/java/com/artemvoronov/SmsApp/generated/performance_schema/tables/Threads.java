/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.performance_schema.tables;


import com.artemvoronov.SmsApp.generated.performance_schema.Indexes;
import com.artemvoronov.SmsApp.generated.performance_schema.Keys;
import com.artemvoronov.SmsApp.generated.performance_schema.PerformanceSchema;
import com.artemvoronov.SmsApp.generated.performance_schema.enums.ThreadsHistory;
import com.artemvoronov.SmsApp.generated.performance_schema.enums.ThreadsInstrumented;
import com.artemvoronov.SmsApp.generated.performance_schema.tables.records.ThreadsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Threads extends TableImpl<ThreadsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.threads</code>
     */
    public static final Threads THREADS = new Threads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadsRecord> getRecordType() {
        return ThreadsRecord.class;
    }

    /**
     * The column <code>performance_schema.threads.THREAD_ID</code>.
     */
    public final TableField<ThreadsRecord, ULong> THREAD_ID = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.threads.NAME</code>.
     */
    public final TableField<ThreadsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>performance_schema.threads.TYPE</code>.
     */
    public final TableField<ThreadsRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    public final TableField<ThreadsRecord, ULong> PROCESSLIST_ID = createField(DSL.name("PROCESSLIST_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_USER = createField(DSL.name("PROCESSLIST_USER"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_HOST = createField(DSL.name("PROCESSLIST_HOST"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_DB = createField(DSL.name("PROCESSLIST_DB"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_COMMAND = createField(DSL.name("PROCESSLIST_COMMAND"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    public final TableField<ThreadsRecord, Long> PROCESSLIST_TIME = createField(DSL.name("PROCESSLIST_TIME"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_STATE = createField(DSL.name("PROCESSLIST_STATE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    public final TableField<ThreadsRecord, String> PROCESSLIST_INFO = createField(DSL.name("PROCESSLIST_INFO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    public final TableField<ThreadsRecord, ULong> PARENT_THREAD_ID = createField(DSL.name("PARENT_THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.threads.ROLE</code>.
     */
    public final TableField<ThreadsRecord, String> ROLE = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    public final TableField<ThreadsRecord, ThreadsInstrumented> INSTRUMENTED = createField(DSL.name("INSTRUMENTED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(com.artemvoronov.SmsApp.generated.performance_schema.enums.ThreadsInstrumented.class), this, "");

    /**
     * The column <code>performance_schema.threads.HISTORY</code>.
     */
    public final TableField<ThreadsRecord, ThreadsHistory> HISTORY = createField(DSL.name("HISTORY"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(com.artemvoronov.SmsApp.generated.performance_schema.enums.ThreadsHistory.class), this, "");

    /**
     * The column <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    public final TableField<ThreadsRecord, String> CONNECTION_TYPE = createField(DSL.name("CONNECTION_TYPE"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    public final TableField<ThreadsRecord, ULong> THREAD_OS_ID = createField(DSL.name("THREAD_OS_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.threads.RESOURCE_GROUP</code>.
     */
    public final TableField<ThreadsRecord, String> RESOURCE_GROUP = createField(DSL.name("RESOURCE_GROUP"), SQLDataType.VARCHAR(64), this, "");

    private Threads(Name alias, Table<ThreadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Threads(Name alias, Table<ThreadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    public Threads(String alias) {
        this(DSL.name(alias), THREADS);
    }

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    public Threads(Name alias) {
        this(alias, THREADS);
    }

    /**
     * Create a <code>performance_schema.threads</code> table reference
     */
    public Threads() {
        this(DSL.name("threads"), null);
    }

    public <O extends Record> Threads(Table<O> child, ForeignKey<O, ThreadsRecord> key) {
        super(child, key, THREADS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.THREADS_NAME, Indexes.THREADS_PROCESSLIST_ACCOUNT, Indexes.THREADS_PROCESSLIST_HOST, Indexes.THREADS_PROCESSLIST_ID, Indexes.THREADS_RESOURCE_GROUP, Indexes.THREADS_THREAD_OS_ID);
    }

    @Override
    public UniqueKey<ThreadsRecord> getPrimaryKey() {
        return Keys.KEY_THREADS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ThreadsRecord>> getKeys() {
        return Arrays.<UniqueKey<ThreadsRecord>>asList(Keys.KEY_THREADS_PRIMARY);
    }

    @Override
    public Threads as(String alias) {
        return new Threads(DSL.name(alias), this);
    }

    @Override
    public Threads as(Name alias) {
        return new Threads(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Threads rename(String name) {
        return new Threads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Threads rename(Name name) {
        return new Threads(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<ULong, String, String, ULong, String, String, String, String, Long, String, String, ULong, String, ThreadsInstrumented, ThreadsHistory, String, ULong, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
