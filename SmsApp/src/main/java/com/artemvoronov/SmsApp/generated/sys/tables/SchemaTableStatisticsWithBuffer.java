/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.SchemaTableStatisticsWithBufferRecord;

import java.math.BigInteger;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaTableStatisticsWithBuffer extends TableImpl<SchemaTableStatisticsWithBufferRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.schema_table_statistics_with_buffer</code>
     */
    public static final SchemaTableStatisticsWithBuffer SCHEMA_TABLE_STATISTICS_WITH_BUFFER = new SchemaTableStatisticsWithBuffer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaTableStatisticsWithBufferRecord> getRecordType() {
        return SchemaTableStatisticsWithBufferRecord.class;
    }

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.table_schema</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> TABLE_SCHEMA = createField(DSL.name("table_schema"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.table_name</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_fetched</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, ULong> ROWS_FETCHED = createField(DSL.name("rows_fetched"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.fetch_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> FETCH_LATENCY = createField(DSL.name("fetch_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_inserted</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, ULong> ROWS_INSERTED = createField(DSL.name("rows_inserted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.insert_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> INSERT_LATENCY = createField(DSL.name("insert_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_updated</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, ULong> ROWS_UPDATED = createField(DSL.name("rows_updated"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.update_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> UPDATE_LATENCY = createField(DSL.name("update_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.rows_deleted</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, ULong> ROWS_DELETED = createField(DSL.name("rows_deleted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.delete_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> DELETE_LATENCY = createField(DSL.name("delete_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read_requests</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, BigInteger> IO_READ_REQUESTS = createField(DSL.name("io_read_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> IO_READ = createField(DSL.name("io_read"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_read_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> IO_READ_LATENCY = createField(DSL.name("io_read_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write_requests</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, BigInteger> IO_WRITE_REQUESTS = createField(DSL.name("io_write_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> IO_WRITE = createField(DSL.name("io_write"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_write_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> IO_WRITE_LATENCY = createField(DSL.name("io_write_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_misc_requests</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, BigInteger> IO_MISC_REQUESTS = createField(DSL.name("io_misc_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.io_misc_latency</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> IO_MISC_LATENCY = createField(DSL.name("io_misc_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_allocated</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> INNODB_BUFFER_ALLOCATED = createField(DSL.name("innodb_buffer_allocated"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_data</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> INNODB_BUFFER_DATA = createField(DSL.name("innodb_buffer_data"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_free</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, String> INNODB_BUFFER_FREE = createField(DSL.name("innodb_buffer_free"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, Long> INNODB_BUFFER_PAGES = createField(DSL.name("innodb_buffer_pages"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages_hashed</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, Long> INNODB_BUFFER_PAGES_HASHED = createField(DSL.name("innodb_buffer_pages_hashed"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_pages_old</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, Long> INNODB_BUFFER_PAGES_OLD = createField(DSL.name("innodb_buffer_pages_old"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.schema_table_statistics_with_buffer.innodb_buffer_rows_cached</code>.
     */
    public final TableField<SchemaTableStatisticsWithBufferRecord, BigInteger> INNODB_BUFFER_ROWS_CACHED = createField(DSL.name("innodb_buffer_rows_cached"), SQLDataType.DECIMAL_INTEGER(44).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    private SchemaTableStatisticsWithBuffer(Name alias, Table<SchemaTableStatisticsWithBufferRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaTableStatisticsWithBuffer(Name alias, Table<SchemaTableStatisticsWithBufferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `schema_table_statistics_with_buffer` as select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`COUNT_FETCH` AS `rows_fetched`,format_pico_time(`pst`.`SUM_TIMER_FETCH`) AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,format_pico_time(`pst`.`SUM_TIMER_INSERT`) AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,format_pico_time(`pst`.`SUM_TIMER_UPDATE`) AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,format_pico_time(`pst`.`SUM_TIMER_DELETE`) AS `delete_latency`,`sys`.`fsbi`.`count_read` AS `io_read_requests`,format_bytes(`sys`.`fsbi`.`sum_number_of_bytes_read`) AS `io_read`,format_pico_time(`sys`.`fsbi`.`sum_timer_read`) AS `io_read_latency`,`sys`.`fsbi`.`count_write` AS `io_write_requests`,format_bytes(`sys`.`fsbi`.`sum_number_of_bytes_write`) AS `io_write`,format_pico_time(`sys`.`fsbi`.`sum_timer_write`) AS `io_write_latency`,`sys`.`fsbi`.`count_misc` AS `io_misc_requests`,format_pico_time(`sys`.`fsbi`.`sum_timer_misc`) AS `io_misc_latency`,format_bytes(`sys`.`ibp`.`allocated`) AS `innodb_buffer_allocated`,format_bytes(`sys`.`ibp`.`data`) AS `innodb_buffer_data`,format_bytes((`sys`.`ibp`.`allocated` - `sys`.`ibp`.`data`)) AS `innodb_buffer_free`,`sys`.`ibp`.`pages` AS `innodb_buffer_pages`,`sys`.`ibp`.`pages_hashed` AS `innodb_buffer_pages_hashed`,`sys`.`ibp`.`pages_old` AS `innodb_buffer_pages_old`,`sys`.`ibp`.`rows_cached` AS `innodb_buffer_rows_cached` from ((`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `sys`.`x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `sys`.`fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `sys`.`fsbi`.`table_name`)))) left join `sys`.`x$innodb_buffer_stats_by_table` `ibp` on(((`pst`.`OBJECT_SCHEMA` = convert(`sys`.`ibp`.`object_schema` using utf8mb4)) and (`pst`.`OBJECT_NAME` = convert(`sys`.`ibp`.`object_name` using utf8mb4))))) order by `pst`.`SUM_TIMER_WAIT` desc"));
    }

    /**
     * Create an aliased <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    public SchemaTableStatisticsWithBuffer(String alias) {
        this(DSL.name(alias), SCHEMA_TABLE_STATISTICS_WITH_BUFFER);
    }

    /**
     * Create an aliased <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    public SchemaTableStatisticsWithBuffer(Name alias) {
        this(alias, SCHEMA_TABLE_STATISTICS_WITH_BUFFER);
    }

    /**
     * Create a <code>sys.schema_table_statistics_with_buffer</code> table reference
     */
    public SchemaTableStatisticsWithBuffer() {
        this(DSL.name("schema_table_statistics_with_buffer"), null);
    }

    public <O extends Record> SchemaTableStatisticsWithBuffer(Table<O> child, ForeignKey<O, SchemaTableStatisticsWithBufferRecord> key) {
        super(child, key, SCHEMA_TABLE_STATISTICS_WITH_BUFFER);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public SchemaTableStatisticsWithBuffer as(String alias) {
        return new SchemaTableStatisticsWithBuffer(DSL.name(alias), this);
    }

    @Override
    public SchemaTableStatisticsWithBuffer as(Name alias) {
        return new SchemaTableStatisticsWithBuffer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaTableStatisticsWithBuffer rename(String name) {
        return new SchemaTableStatisticsWithBuffer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaTableStatisticsWithBuffer rename(Name name) {
        return new SchemaTableStatisticsWithBuffer(name, null);
    }
}
