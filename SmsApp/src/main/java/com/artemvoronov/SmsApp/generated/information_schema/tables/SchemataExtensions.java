/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.information_schema.tables;


import com.artemvoronov.SmsApp.generated.information_schema.InformationSchema;
import com.artemvoronov.SmsApp.generated.information_schema.tables.records.SchemataExtensionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemataExtensions extends TableImpl<SchemataExtensionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.SCHEMATA_EXTENSIONS</code>
     */
    public static final SchemataExtensions SCHEMATA_EXTENSIONS = new SchemataExtensions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemataExtensionsRecord> getRecordType() {
        return SchemataExtensionsRecord.class;
    }

    /**
     * The column <code>information_schema.SCHEMATA_EXTENSIONS.CATALOG_NAME</code>.
     */
    public final TableField<SchemataExtensionsRecord, String> CATALOG_NAME = createField(DSL.name("CATALOG_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.SCHEMATA_EXTENSIONS.SCHEMA_NAME</code>.
     */
    public final TableField<SchemataExtensionsRecord, String> SCHEMA_NAME = createField(DSL.name("SCHEMA_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.SCHEMATA_EXTENSIONS.OPTIONS</code>.
     */
    public final TableField<SchemataExtensionsRecord, String> OPTIONS = createField(DSL.name("OPTIONS"), SQLDataType.VARCHAR(256), this, "");

    private SchemataExtensions(Name alias, Table<SchemataExtensionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemataExtensions(Name alias, Table<SchemataExtensionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.SCHEMATA_EXTENSIONS</code> table reference
     */
    public SchemataExtensions(String alias) {
        this(DSL.name(alias), SCHEMATA_EXTENSIONS);
    }

    /**
     * Create an aliased <code>information_schema.SCHEMATA_EXTENSIONS</code> table reference
     */
    public SchemataExtensions(Name alias) {
        this(alias, SCHEMATA_EXTENSIONS);
    }

    /**
     * Create a <code>information_schema.SCHEMATA_EXTENSIONS</code> table reference
     */
    public SchemataExtensions() {
        this(DSL.name("SCHEMATA_EXTENSIONS"), null);
    }

    public <O extends Record> SchemataExtensions(Table<O> child, ForeignKey<O, SchemataExtensionsRecord> key) {
        super(child, key, SCHEMATA_EXTENSIONS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SchemataExtensions as(String alias) {
        return new SchemataExtensions(DSL.name(alias), this);
    }

    @Override
    public SchemataExtensions as(Name alias) {
        return new SchemataExtensions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemataExtensions rename(String name) {
        return new SchemataExtensions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemataExtensions rename(Name name) {
        return new SchemataExtensions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
