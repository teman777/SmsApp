/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.sys.tables;


import com.artemvoronov.SmsApp.generated.sys.Sys;
import com.artemvoronov.SmsApp.generated.sys.tables.records.HostSummaryRecord;

import java.math.BigInteger;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostSummary extends TableImpl<HostSummaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.host_summary</code>
     */
    public static final HostSummary HOST_SUMMARY = new HostSummary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HostSummaryRecord> getRecordType() {
        return HostSummaryRecord.class;
    }

    /**
     * The column <code>sys.host_summary.host</code>.
     */
    public final TableField<HostSummaryRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>sys.host_summary.statements</code>.
     */
    public final TableField<HostSummaryRecord, BigInteger> STATEMENTS = createField(DSL.name("statements"), SQLDataType.DECIMAL_INTEGER(64), this, "");

    /**
     * The column <code>sys.host_summary.statement_latency</code>.
     */
    public final TableField<HostSummaryRecord, String> STATEMENT_LATENCY = createField(DSL.name("statement_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.host_summary.statement_avg_latency</code>.
     */
    public final TableField<HostSummaryRecord, String> STATEMENT_AVG_LATENCY = createField(DSL.name("statement_avg_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.host_summary.table_scans</code>.
     */
    public final TableField<HostSummaryRecord, BigInteger> TABLE_SCANS = createField(DSL.name("table_scans"), SQLDataType.DECIMAL_INTEGER(65), this, "");

    /**
     * The column <code>sys.host_summary.file_ios</code>.
     */
    public final TableField<HostSummaryRecord, BigInteger> FILE_IOS = createField(DSL.name("file_ios"), SQLDataType.DECIMAL_INTEGER(64), this, "");

    /**
     * The column <code>sys.host_summary.file_io_latency</code>.
     */
    public final TableField<HostSummaryRecord, String> FILE_IO_LATENCY = createField(DSL.name("file_io_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.host_summary.current_connections</code>.
     */
    public final TableField<HostSummaryRecord, BigInteger> CURRENT_CONNECTIONS = createField(DSL.name("current_connections"), SQLDataType.DECIMAL_INTEGER(41), this, "");

    /**
     * The column <code>sys.host_summary.total_connections</code>.
     */
    public final TableField<HostSummaryRecord, BigInteger> TOTAL_CONNECTIONS = createField(DSL.name("total_connections"), SQLDataType.DECIMAL_INTEGER(41), this, "");

    /**
     * The column <code>sys.host_summary.unique_users</code>.
     */
    public final TableField<HostSummaryRecord, Long> UNIQUE_USERS = createField(DSL.name("unique_users"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.host_summary.current_memory</code>.
     */
    public final TableField<HostSummaryRecord, String> CURRENT_MEMORY = createField(DSL.name("current_memory"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.host_summary.total_memory_allocated</code>.
     */
    public final TableField<HostSummaryRecord, String> TOTAL_MEMORY_ALLOCATED = createField(DSL.name("total_memory_allocated"), SQLDataType.VARCHAR(11), this, "");

    private HostSummary(Name alias, Table<HostSummaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private HostSummary(Name alias, Table<HostSummaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `host_summary` as select if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`) AS `host`,sum(`sys`.`stmt`.`total`) AS `statements`,format_pico_time(sum(`sys`.`stmt`.`total_latency`)) AS `statement_latency`,format_pico_time(ifnull((sum(`sys`.`stmt`.`total_latency`) / nullif(sum(`sys`.`stmt`.`total`),0)),0)) AS `statement_avg_latency`,sum(`sys`.`stmt`.`full_scans`) AS `table_scans`,sum(`sys`.`io`.`ios`) AS `file_ios`,format_pico_time(sum(`sys`.`io`.`io_latency`)) AS `file_io_latency`,sum(`performance_schema`.`accounts`.`CURRENT_CONNECTIONS`) AS `current_connections`,sum(`performance_schema`.`accounts`.`TOTAL_CONNECTIONS`) AS `total_connections`,count(distinct `performance_schema`.`accounts`.`USER`) AS `unique_users`,format_bytes(sum(`sys`.`mem`.`current_allocated`)) AS `current_memory`,format_bytes(sum(`sys`.`mem`.`total_allocated`)) AS `total_memory_allocated` from (((`performance_schema`.`accounts` join `sys`.`x$host_summary_by_statement_latency` `stmt` on((`performance_schema`.`accounts`.`HOST` = `sys`.`stmt`.`host`))) join `sys`.`x$host_summary_by_file_io` `io` on((`performance_schema`.`accounts`.`HOST` = `sys`.`io`.`host`))) join `sys`.`x$memory_by_host_by_current_bytes` `mem` on((`performance_schema`.`accounts`.`HOST` = `sys`.`mem`.`host`))) group by if((`performance_schema`.`accounts`.`HOST` is null),'background',`performance_schema`.`accounts`.`HOST`)"));
    }

    /**
     * Create an aliased <code>sys.host_summary</code> table reference
     */
    public HostSummary(String alias) {
        this(DSL.name(alias), HOST_SUMMARY);
    }

    /**
     * Create an aliased <code>sys.host_summary</code> table reference
     */
    public HostSummary(Name alias) {
        this(alias, HOST_SUMMARY);
    }

    /**
     * Create a <code>sys.host_summary</code> table reference
     */
    public HostSummary() {
        this(DSL.name("host_summary"), null);
    }

    public <O extends Record> HostSummary(Table<O> child, ForeignKey<O, HostSummaryRecord> key) {
        super(child, key, HOST_SUMMARY);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public HostSummary as(String alias) {
        return new HostSummary(DSL.name(alias), this);
    }

    @Override
    public HostSummary as(Name alias) {
        return new HostSummary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HostSummary rename(String name) {
        return new HostSummary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HostSummary rename(Name name) {
        return new HostSummary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, BigInteger, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, Long, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
