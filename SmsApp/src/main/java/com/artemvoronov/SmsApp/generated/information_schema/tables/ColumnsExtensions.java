/*
 * This file is generated by jOOQ.
 */
package com.artemvoronov.SmsApp.generated.information_schema.tables;


import com.artemvoronov.SmsApp.generated.information_schema.InformationSchema;
import com.artemvoronov.SmsApp.generated.information_schema.tables.records.ColumnsExtensionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnsExtensions extends TableImpl<ColumnsExtensionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.COLUMNS_EXTENSIONS</code>
     */
    public static final ColumnsExtensions COLUMNS_EXTENSIONS = new ColumnsExtensions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnsExtensionsRecord> getRecordType() {
        return ColumnsExtensionsRecord.class;
    }

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.TABLE_CATALOG</code>.
     */
    public final TableField<ColumnsExtensionsRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.TABLE_SCHEMA</code>.
     */
    public final TableField<ColumnsExtensionsRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.TABLE_NAME</code>.
     */
    public final TableField<ColumnsExtensionsRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.COLUMN_NAME</code>.
     */
    public final TableField<ColumnsExtensionsRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.ENGINE_ATTRIBUTE</code>.
     */
    public final TableField<ColumnsExtensionsRecord, JSON> ENGINE_ATTRIBUTE = createField(DSL.name("ENGINE_ATTRIBUTE"), SQLDataType.JSON, this, "");

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.SECONDARY_ENGINE_ATTRIBUTE</code>.
     */
    public final TableField<ColumnsExtensionsRecord, JSON> SECONDARY_ENGINE_ATTRIBUTE = createField(DSL.name("SECONDARY_ENGINE_ATTRIBUTE"), SQLDataType.JSON, this, "");

    private ColumnsExtensions(Name alias, Table<ColumnsExtensionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ColumnsExtensions(Name alias, Table<ColumnsExtensionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.COLUMNS_EXTENSIONS</code> table reference
     */
    public ColumnsExtensions(String alias) {
        this(DSL.name(alias), COLUMNS_EXTENSIONS);
    }

    /**
     * Create an aliased <code>information_schema.COLUMNS_EXTENSIONS</code> table reference
     */
    public ColumnsExtensions(Name alias) {
        this(alias, COLUMNS_EXTENSIONS);
    }

    /**
     * Create a <code>information_schema.COLUMNS_EXTENSIONS</code> table reference
     */
    public ColumnsExtensions() {
        this(DSL.name("COLUMNS_EXTENSIONS"), null);
    }

    public <O extends Record> ColumnsExtensions(Table<O> child, ForeignKey<O, ColumnsExtensionsRecord> key) {
        super(child, key, COLUMNS_EXTENSIONS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ColumnsExtensions as(String alias) {
        return new ColumnsExtensions(DSL.name(alias), this);
    }

    @Override
    public ColumnsExtensions as(Name alias) {
        return new ColumnsExtensions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnsExtensions rename(String name) {
        return new ColumnsExtensions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnsExtensions rename(Name name) {
        return new ColumnsExtensions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, JSON, JSON> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
